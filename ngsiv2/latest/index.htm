<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>fiware-ngsiv2-reference</title>
</head>
<body>
  <script src="https://api.apiary.io/seeds/embed.js"></script>
  <script>
    var embed = new Apiary.Embed({
      apiBlueprint: "FORMAT: 1A\nHOST: http://orion.lab.fiware.org\nTITLE: FIWARE-NGSI v2 Specification\nDATE: 30 September 2015\nVERSION: 2.0-wip1\nPREVIOUS_VERSION: <placeholder>\nAPIARY_PROJECT: fiware-ngsi-v2\nSPEC_URL: https://telefonicaid.github.io/fiware-orion/api/v2/\nGITHUB_SOURCE: http://github.com/telefonicaid/fiware-orion.git\n\n# FIWARE-NGSI v2 Specification\n\nThis specification defines the FIWARE-NGSI version 2 API. FIWARE-NGSI v2 is intended to manage all the whole lifecycle of\ncontext information including updates, queries, registrations and subscriptions.\n\n# Preface\n\n## Editors\n\nJosé Manuel Cantera Fonseca (Telefónica I+D), Fermín Galán Márquez (Telefónica I+D), Tobias Jacobs (NEC).\n  \n## Acknowledgements\n\nThe editors would like to express their gratitude to the following people who actively contributed to this specification:\nJuan José Hierro (Telefónica I+D), Marcos Reyes (Telefónica I+D), Ken Zangelin (Telefónica I+D), Iván Arias López (Telefónica I+D),\nCarlos Romero Brox (Telefónica I+D), Antonio José López Navarro (Telefónica I+D),  Marc Capdevielle (Orange), Gilles Privat (Orange), \nSergio García Gómez (Telefónica I+D), Martin Bauer (NEC).\n  \n## Status\n\nThis is a work in progress and is changing on a daily basis.\nPlease send your comments to fiware-ngsi@lists.fiware.org. You can\ntrace the discussions checking the archives of the mailing list:\nhttps://lists.fiware.org/private/fiware-ngsi/ (list subscription\nrequired).\n\nIn addition, note that a list of currently open discussions is available at\n\n* https://github.com/telefonicaid/fiware-orion/issues/1022\n* https://github.com/telefonicaid/fiware-orion/issues/1034\n* https://github.com/telefonicaid/fiware-orion/issues/1035\n\n## Copyright\n\nThis specification is licensed under the\n[FIWARE Open Specification License (implicit patent license)]\n(http://forge.fiware.org/plugins/mediawiki/wiki/fiware/index.php/FI-WARE_Open_Specification_Legal_Notice_(implicit_patents_license)).\n\n## Conformance\n\nAll the interfaces described by this specification are mandatory and must be implemented in order to be compliant with. \n\n# Specification\n\n## Introduction\n\nThe FIWARE NGSI (Next Generation Service Interface) API defines \n\n* a **data model** for context information, based on a simple information model using the notion of *context entities*\n* a **context data interface** for exchanging information by means of query, subscription, and update operations\n* a **context availability interface** for exchanging information on how to obtain context information\n(whether to separate the two interfaces is currently under discussion).\n* a set of typical **roles** played by NGSI-compliant components\n\n## Terminology\n\n### Context data modelling and exchange\n\n#### Context Entities\n\nContext entities, or simply called entities, are the center of gravity\nin the FIWARE NGSI information model. An entity represents a\nreal-world object like e.g. a sensor, a person, or a room. Each entity\nis uniquely identified by its **entity id**. \n\nFurthermore, the type system of FIWARE NGSI enables entities to have \nan **entity type**. Entity types are semantic types; they are intended\nto describe the type of real-world object represented by the entity.\nFor example, a context entity with id *sensor-365* could have the\ntype *temperatureSensor*.\n\n#### Context Elements\n\n*(Note: the distinction between context entities and context elements \nis still under discussion; therefore the notion of context elements\ncurrently only appears in this section.)*\n\nA context element is a data object (e.g. JSON object; see the section\non JSON representation below) which contains information about a\nspecific context entity. Consequently, a context element has a\nmandatory property `id` in order to identify the context entity it\nrefers to. It furthermore can contain an optional property `type`\nto describe the type of the entity. Further properties can be used\nto represent more information about the entity (see the **context\nattributes** section below).\n\nIt is important to understand that the relationship of entity and context element is one-to-many. This means that \n* each context element refers to exactly one entity\n* there can be several context elements  referring to the same entity. The context elements can for example contain\ndifferent pieces of information about the entity\n\n#### Context Attributes \n\nContext attributes are properties of context entities.\nFor example, the current speed of a car could be modeled as\nattribute *current_speed* of entity *car-104*.\n\nIn the NGSI data model, attributes have an *attribute name*,\nan *attribute type*, an *attribute value* and *metadata*. \n * The attribute name describes which kind of property of the entity the attribute value represents, for example *current_speed*.\n * The attribute type represents the NGSI value type of the attribute value.\n Note that FIWARE NGSI has its own type system for attribute values, so NGSI value types are not the same as JSON types.\n * The attribute value finally contains\n  * the actual data\n  * optional **metadata** describing properties of the attribute value like e.g. accuracy, provider, or a timestamp\n  \n#### Context Metadata\n\nContext metadata is used in FIWARE NGSI at several places, one of\nthem being an optional part of the attribute value as described\nabove. Similarly to attributes, each piece of metadata has \n * **a metadata name**, describing the role of the metadata at the\n place where it occurs; for example, the metadata name *accuracy* \n indicates that the metadata value describes how accurate a given \n attribute value is\n * a **metadata type**, describing the NGSI value type of the metadata value\n * a **metadata value** containing the actual metadata\n\nNote that in NGSI it is not foreseen that metadata values can\nthemselves have metadata.\n\n#### Restrictions and Operation Scopes\n\n(placeholder to describe restrictions and operation scopes)\n\n#### Context Queries\n\n(placeholder for describing what a context query is, and some hints on how this\nis typically done in the REST interface)\n\n#### Context Subscriptions\n\n(placeholder for describing the concept of context subscriptions)\n\n#### Context Updates\n\n(placeholder for describing updates)\n\n### Exchanging Context Availability Information\n\n(placeholder on some introduction of what context availability information is)\n\n#### Context Registrations\n\n(placeholder for describing what a context registration is and what it is used for)\n\n#### Context Discovery\n\n(placehoder for describing what discovery does)\n\n#### Context Availability Subscription\n\n(placeholder for describing context availability subscriptions)\n\n#### Registering Context Availability Information\n\n(placeholder for describing the operation of registering context)\n\n### Roles of FIWARE NGSI components\n\n(placeholder to describe roles like context provider, context producer,\ncontext broker, context registry, context consumer)\n\n## JSON Entity Representation\n\nAn entity is represented by a JSON object with the following syntax:\n\n* The entity id is specified by the object\'s `id` property, which value is a string containing the entity id.\n\n* The entity type is specified by the object\'s `type` property, which value is a string containing the entity\'s type name.\n\n* Entity attributes are specified by additional properties, which name is the `name` of the attribute and which representation\n  is described in the JSON Attribute Representation section below. Obviously, `id` and `type` are not allowed as attribute names.\n\nAn example of this syntax in shown below:\n\n```\n{\n  \"id\": \"entityID\",\n  \"type\": \"entityType\",\n  \"attr_1\": <val_1>,\n  \"attr_2\": <val_2>,\n  ...\n  \"attr_N\": <val_N>\n}\n```\n\nThe normalized representation of entities always include `id`, `type` and the properties which represent attributes. However, simplified\nor partial representations (see below at Partial Representations section), may leave out some of them. The specification of each operation\nincludes details about what  representation is expected as input or what representation will be provided (rendered) as output.\n\n## JSON Attribute Representation\n\nAn attribute is represented by a JSON object with the following syntax:\n\n* The attribute value is specified by the `value` property, which value may be any JSON datatype.\n\n* The attribute NGSI type is specified by the `type` property, which value is a string containing the NGSI type.\n\n* The attribute metadata is specified by the `metadata` property. Its value is another JSON object which will contain a\n  property per metadata element defined (the name of the property is the `name` of the metadata element). Each metadata element,\n  in turn, is represented by a JSON object containing the following properties:\n\n  * `value`: Its value will contain the metadata value, which may correspond to any JSON datatype.\n\n  * `type`: Its value will contain a string representation of the metadata NGSI type.\n\nAn example of this syntax in shown below:\n\n```\n{\n  \"value\": <...>,\n  \"type\": <...>,\n  \"metadata\": <...>\n}\n```\n\n## Simplified Entity Representation\n\nThere are two representation modes, which must be supported by implementations, and which allow to generate simplified representations of entities.\n\n* *keyValues* mode. This mode represents each entity attribute only by its value, leaving out the information about type and metadata.\n  Thus, when this mode is on, only the attribute value is represented and will correspond to the value of the property which represents the attribute.\n  See example below.\n\n```\n{\n   \"id\": \"R12345\",\n   \"type\": \"Room\",\n   \"temperature\": 22\n}\n```\n\n* *values mode*. This mode represents the entity only by a collection of attribute values conveyed by an Array. Id and type information are left out.\n  See example below. The order of the attributes in the Array is specified by the `attrs` URI param (e.g. `attrs=branch,colour,engine`) or arbitrary\n  order in the case `attrs` is not used.\n\n```\n[ \'Ford\', \'black\', 78.3 ]\n```\n\n* *unique mode*. This mode is just like *values mode*, with the only difference that values are not repeated.\n\n## Partial Representations\n\nSome operations imply that only a partial representation of an entity will be provided, which are summarized below:\n\n* `id` and `type` are not allowed in update operations, as they are inmutable properties.\n\n* In the requests in which entity `type` is allowed, it may be omitted. When omitted, the default string value `none`\n  is used for the type.\n\n* In some cases, not all the attributes of the entity are shown, e.g. a query which selects a subset of entity attributes.\n\n* Attribute/metadata `value` may be omitted in requests, meaning that the attribute/metadata has `null` value. It is always present in responses.\n\n* Attribute/metadata `type` may be ommitted in requests. When omitted, the default string value `none`.\n\n* Attribute `metadata` may be ommitted in requests, meaning that there are not metadata elements associated to the attribute. In responses, this property is set to\n  `{}` if the attribute doesn\'t have metadata.\n\n\n## Special attribute types\n\nGenerally speaking, user-defined attribute types are informative, they are processed by the NGSIv2 server in\nan opaque way. Nonetheless, the types described below are used to convey an special meaning\n\n* `date`:  identifies dates, in ISO8601 format. These attributes can be used with the\n  greater than, less than, greater or equal, lesser or equal and range query operators. For instance\n  (only the referred entity attribute is shown) :\n\n```\n{\n  \"timestamp\": {\n    \"value\": \"2017-06-17T07:21:24.238Z\",\n    \"type: \"date\"\n  }\n}\n```\n\n## Virtual attributes\n\nThere are entity properties that are not directly modificable by NGSIv2 clients, but that can be rendered\nby NGSIv2 servers to provide extra information. From a representation point of view, they are like\nregular attributes, with name, value and type.\n\nVirtual attributes are not rendered by default. In oder to render an specific attribute, add its name\nto the `options` URL parameter.\n\nThe list of virtual attributes is the following:\n\n* `dateCreation` (type: `date`): entity creation date as ISO 8601 string.\n* `dateModification` (type: `date`): entity modification date as ISO 8601 string.\n\nAs regular attributes, they can be  used in `attrs`, `q` filters and `orderBy`. However, they cannot be used\nin resource URLs.\n\n\n## Field syntax restrictions\n\nFields used as identifiers in the NGSIv2 API follow special rules regarding allowed syntax. These rules applies to:\n\n* Entity id\n* Entity type\n* Attribute name\n* Attribute type\n* Metadata name\n* Metadata type\n\nThe rules are:\n\n* Allowed characters are the ones in the plain ASCII set except the following ones: control characters, whitespace, `&`, `?`, `/` and `#`.\n* Maximum field length is 256 characters.\n* Minimum field length is 1 character.\n\nIn addition to the above rules, given NGSIv2 server implementations could add additional syntactical restrictions in those\nor other fields, e.g. to avoid some cross script injection attacks.\n\nIn the case a client attemps to use a field not valid from a syntax point of view, it shall get a \"Bad Request\" error\nexplaining the cause.\n\n## Atrribute names restrictions\n\nThe following strings must not be used as attribute names:\n\n* `id`, as it would conflict to the field used to represent entity id)\n\n* `type`, as it would conflict to the field used to represent entity type)\n\n* `geo:distance`, as it would conflict with the string used in `orderBy` for proximity to center point.\n\n* Virtual attribute names (see specific section about virtual attributes)\n\n## Ordering results\n\nOperations that retrieve lists of entities allow the `orderBy` URI parameter to specify the order; its \nvalue can be:\n\n* The keyword geo:distance to order results by distance to a reference geometry when a \"near\" (`georel=near`) spatial \n  relationship is used. \n\n* A comma-separated list of attributes (including virtual attributes), e.g. `temperature,!humidity`. Results are ordered\n  by the first attribute. On ties, the results are ordered by the second attribute and so on. A \"!\" before the attribute\n  name means that the order is reversed.\n\n## Error responses\n\nIn the case of being present, the error payload is JSON object including the following fields:\n\n+ `error` (required, string): a textual description of the error.\n+ `description` (optional, string): additional information about the error.\n+ `affectedItems` (optional, array[string]): a list of elements affected by the error. Depending on the operation, it may\n  refer to entities, registrations or subscriptions.\n\nError list (HTTP response code in parenthesis):\n\n* ParseError            (`400`). The incoming JSON payload cannot be parsed.\n* BadRequest            (`400`). The incoming request is invalid in this context.\n* NotFound              (`404`). The Context Element referred in the request has not been found.\n* TooManyResults        (`409`). There are several results that match with the resource identification used\n  in the request. This typically the case of requesting an entity with not enough information and the\n  solution is to enhance entity identification adding more information, e.g. adding entity type\n  and/or service path.\n* LengthRequired        (`411`). Zero/No Content-Length in PUT/POST/PATCH request.\n* RequestEntityTooLarge (`413`). Payload is too large.\n* UnsupportedMediaType  (`415`). Request content type is not supported.\n* InvalidModification   (`422`). Some piece of information is missing in payload.\n* NotSupportedQuery     (`422`). The implementation does not support the query issued.\n* NoResourcesAvailable  (`413`). There are no server resources to fulfill the client request. \n\n## Geospatial properties of entities\n\nThe geospatial properties of a context entity can be represented by means of regular context attributes.\nThe provision of geospatial properties enables the resolution of geographical queries.\n\nTwo different syntaxes must be supported by compliant implementations: \n\n* *Simple Location Format*. It is meant as a very lightweight format that developers and users can quickly\nand easily add to their existing entities with little effort.\n\n* *GeoJSON*.  [GeoJSON](https://tools.ietf.org/html/draft-butler-geojson-06)\nis a geospatial data interchange format based on the JavaScript Object Notation (JSON). GeoJSON provides greater flexibility\nallowing the representation of point altitudes or even more complex geospatial shapes, for instance\n[multi geometries](http://www.macwright.org/2015/03/23/geojson-second-bite.html#multi-geometries).\n\nClient applications are responsible for defining which entity attributes convey geospatial properties (by providing\nan appropriate NGSI attribute type). Typically it will be an entity attribute named `location`,\nbut nothing prevents use cases where an entity contains more than one geospatial attribute. For instance,\nlocations specified at different granularity levels or provided by different location methods with different accuracy. \nNonetheless, it is noteworthy the fact that spatial properties\nneed special indexes which can be under resource constraints imposed by backend databases.\nThus, implementations may raise errors when spatial index limits are exceeded.\nThe recommended HTTP status code for those situations is ``413``, *Request entity too large*, and the reported error\non the response payload must be ``NoResourcesAvailable``.\n\n*Note: At the time of writing it is still under discussion if supporting both syntaxes is really needed* \n\n### Simple Location Format\n\nSimple Location Format supports basic geometries ( *point* , *line* , *box* , *polygon* ) and covers the typical\nuse cases when encoding geographical locations. It has been inspired by [GeoRSS Simple](http://www.georss.org/simple.html).\n\nIt is noteworthy that the Simple Location Format is not intended to represent complex positions on Earth surface.\nFor instance, those applications which require to capture altitude coordinates will have to use GeoJSON as\nrepresentation format for the geospatial properties of their entities. \n\nA context attribute  which represents a location encoded using the Simple Location Format\nmust conform to the following syntax:\n\n* The attribute type must be one of the following values: (`geo:point`, `geo:line`, `geo:box` or `geo:polygon`).\n* The attribute value must be a list of coordinates. By default coordinates will be defined\nusing the [WGS84 Lat Long](https://en.wikipedia.org/wiki/World_Geodetic_System#WGS84),\n[EPSG::4326](http://www.opengis.net/def/crs/EPSG/0/4326) coordinate reference system (CRS),\nwith latitude and longitude units of decimal degrees. Such coordinate list will allow to encode the geometry\nspecified by the `type` attribute and will be encoded according with the specific rules defined below:\n\n  * Type `geo:point`:   the attribute value must contain a string containing a\n  valid latitude-longitude pair, separated by a comma. \n  * Type `geo:line`:    the attribute value must contain a string array of\n  valid latitude-longitude pairs. There must be at least two pairs.\n  * Type `geo:polygon`: the attribute value must contain a string array\n  of valid latitude-longitude pairs.\nThere must be at least four pairs, with the last being identical to the first\n(so a polygon has a minimum of three actual points).\nCoordinate pairs should be properly ordered so that the line segments\nthat compose the polygon remain on the ​outer ​edge of the area defined.\nFor instance, the following path, ```[0,0], [0,2], [2,0], [2, 2]```, is an example of an invalid polygon definition. \nImplementations should raise an error when none of the former conditions are met by input data. \n  * Type `geo:box`:     A bounding box is a rectangular region, often used to define the extents of a map or\na rough area of interest. A box is represented by a two-length string array of latitude-longitude pairs.\nThe first pair is the lower corner, the second is the upper corner.\n\nNote: Circle geometries are not supported, as the [literature](https://github.com/geojson/geojson-spec/wiki/Proposal---Circles-and-Ellipses-Geoms#discussion-notes)\ndescribes different shortcomings for implementations. \n\nThe examples below illustrate the referred syntax:\n\n```\n{\n  \"location\": {\n    \"value\": \"41.3763726, 2.186447514\",\n    \"type\": \"geo:point\"\n  }\n}\n```\n\n```\n{\n  \"location\": {\n    \"value\": [\n              \"40.63913831188419, -8.653321266174316\",\n              \"40.63881265804603, -8.653149604797363\"\n    ],\n    \"type\": \"geo:box\"\n  }\n}\n```\n\n### GeoJSON\n\nA context attribute which represents a location encoded using GeoJSON must conform to the following syntax:\n\n* The NGSI type of the attribute must be `geo:json`.\n* The attribute value must be a valid GeoJSON object. It is noteworthy that longitude comes first in GeoJSON coordinates.\n\nThe example below illustrates the usage of GeoJSON.\nMore GeoJSON examples can be found at [GeoJSON IETF Spec](https://tools.ietf.org/html/draft-butler-geojson-06#page-14).\nAdditionally, the following [GeoJSON Tutorial](http://www.macwright.org/2015/03/23/geojson-second-bite.html)\ncan be useful in urderstanding the format. \n\n```\n{\n  \"location\": {\n    \"value\": {\n      \"type\": \"Point\",\n      \"coordinates\": [2.186447514, 41.3763726]\n    },\n    \"type\": \"geo:json\"\n  }\n}\n```\n\n## Simple Query Language\n\nThe Simple Query Language provides a simplified syntax to retrieve entities which match a set of conditions.\nA query is composed by a list of statements separated by the \';\' character. Each statement express a matching condition.\nThe query will return all the entities which match all the matching conditions (AND logical operator). \n\nThere are two kind of statements: *unary statements* and *binary statements*.\n\nBinary statements are composed by an attribute name (e.g. \"temperature\"), operator and value (which format\ndepends on the operator), e.g.:\n\n```\ntemperature==50\ntemperature<=20\n```\n\nThe list of operators (and the format of the values they use) is as follows:\n\n+ **Equal**: `==`. It accepts the following values:\n    + Single element, e.g. `temperature==40`. It matches entities whose attribute value\n      that exact value.\n    + A list of comma-separated values, e.g. `color==black,red`. It matches entities whose\n      attribute value is one of the values (OR clause). Eg. entities which `color` is set to\n      `black` will match, while entities which `color` is set to `white` will not match.\n    + A range, specified as a minimum and maximum separated by `..`. It matches if\n      the value is in the interval between the minimum and the maximum (both included). It can only be used\n      with attributes which contain dates (ISO8601 format), numbers or strings. E.g. `temperature==10..20` matchs if the\n      temperature is greater or equal than 10 and lower or equal than 20.\n+ **Unequal**: `!=`. It accepts the following values:\n      + The value is a single element, e.g. `temperature!=40`. It matches entities whose attribute\n      value is not that exact value.\n      + A list of comma-separated values, e.g. `color!=black,red`. It matches entities whose\n      attribute value is not any of the values (AND clause). Eg. entities whose `color` is set\n      to `black` will not match, while entities whose `color` is set to `white`will match.\n      + A range, specified as a minimum and maximum separated by `..`. It matches\n      if the value is not in the interval between the minimum and the maximum (both included). It can only\n      be used with attributes which contain dates (ISO8601 format), numbers or strings. E.g. `temperature!=10..20` matches if\n      the temperature is lower than 10 or greater than 20 (it will not match if the tempeature is 10 or the\n      temperature is 20).\n+ **Greater than**: `>`. The value is a single element, e.g. `temperature>40`. It\n  matches entities which attribute value is strictly greater than that value. It only makes sense when\n  used with attributes which contain dates, numbers or strings (using with attributes of other type might lead to\n  unexpected results).\n+ **Less than**: `<`. The value is a single element, e.g. `temperature<40`. It\n  matches entities which attribute value is strictly less than that value. It only makes sense when\n  used with attributes which contain dates, numbers or strings (using with attributes of other type might lead to\n  unexpected results).\n+ **Greater or equal than**: `>=`. The value is a single element, e.g. `temperature>=40`.\n  It matches entities which attribute value is greater than or equal to that value. It only makes sense when\n  used with attributes which contain dates, numbers or strings (using with attributes of other type might lead to\n  unexpected results).\n+ **Less or equal than**: `<=`. The value is a single element, e.g. `temperature<=40`. It\n  matches entities which attribute value is less than or equal to that value. It only makes sense when\n  used with attributes which contain dates, numbers or strings (using with attributes of other type might lead to\n  unexpected results).\n+ **Match pattern**: `~=`. The value matches a given pattern, expressed as a regular expression, e.g.\n  `color=ow` matches `brown` or `yellow`. It only makes sense when used with attributes which contain strings.\n\nThe symbol `:` can be used as synonym of `==`.\n\nIn the case of equal or unequal, if the value to match include a `,`, you can use simple quote\n(`\'`), e.g: `color==\'light,green\',\'deep,blue\'`.\n\nUnary negatory statements use the unary operator `!`, while affirmative unary statements use no operator at all.\nThe unary statements are used to check for attribute existence. E.g. `temperature` matches entities that have\nan attribute called \'temperature\' (no matter its value), while `!temperature` matches entities that do not have\na temperature attribute.\n  \n \n## Geographical Queries\n\nGeographical queries are specified by means of the following parameters:\n\n``georel`` is intended to specify a spatial relationship (a predicate)\nbetween matching entities and a reference shape (`geometry`).\nIt is composed of a token list separated by \';\'.\nThe first token is the relationship name, the rest of tokens (if any) are modifiers which\nprovide more information about such a relationship. The following values are allowed:\n\n+ `georel=near`. The ``near`` relationship means that matching entities must be located at certain threshold\ndistance to the reference geometry. It supports the following modifiers:\n  + `maxDistance`.  Express, in meters, the maximum distance at which matching entities must be located.\n  + `minDistance`.  Express, in meters, the minimum distance at which matching entities must be located.\n+ `georel=coveredBy`. Denotes that matching entities are those which exist entirely within the reference geometry.\nWhen resolving this query the border of a shape must be considered to be part of the shape. \n+ `georel=intersects`. Denotes that matching entities will be those intersecting with the reference geometry.\n+ `georel=equals`. The geometry associated to the position of matching entities\nand the reference geometry must be exactly the same.\n+ `georel=disjoint`. Denotes that matching entities will be those NOT intersecting with the reference geometry. \n\n`geometry` allows to define the reference shape to be used when resolving the query.\n The following geometries (see Simple Location Format) must be supported:\n\n+ `geometry=point`, defines a point on the Earth surface.\n+ `geometry=line`, defines a polygonal line.\n+ `geometry=polygon`, defines a polygon.\n+ `geometry=box`, defines a bounding box.\n\n**coords** must be a string containing a semicolon separated list of pairs of geographical coordinates\nin accordance with the geometry specified and the rules mandated by the Simple Location Format:\n\n* `geometry=point`.   `coords` will contain a pair of WGS-84 geo-coordinates.\n* `geometry=line`.    `coords` will contain a list of pairs of WGS-84 geo-coordinates.\n* `geometry=polygon`. `coords` will be composed by at least four pairs of WGS-84 geo-coordinates.\n* `geometry=box`.     `coords` will be composed by two pairs of WGS-84 geo-coordinates.\n\nExamples:\n\n`georel=near;maxDistance:1000&geometry=point&coords=-40.4,-3.5`.\nMatching entities will be located, at a maximum, 1000 meters far away from the reference point.\n\n`georel=near;minDistance:5000&geometry=point&coords=-40.4,-3.5`.\nMatching entities will be at least 5000 meters far away from the reference point. \n\n`georel=coveredBy&geometry=polygon&coords=25.774,-80.190;18.466,-66.118;32.321,-64.757;25.774,-80.190`\nMatching entities will be those located within the referred polygon.\n\n### Query Resolution\n\nIf an implementation is not able to resolve a geographical query, the HTTP Status code of the response\nmust be ```422```, *Unprocessable Entity*. The error name present in the error payload must be\n``NotSupportedQuery``. \n\nWhen resolving geographical queries, through the Simple Query Language,\nthe API implementation is responsible for determining which entity attribute\ncontains the geographical location to be used for matching purposes.\nTo this aim, the following rules must be followed:\n\n* If an entity has no attribute which corresponds to a location (encoded as GeoJSON or the\nSimple Location Format), then such an entity has not declared any geospatial property and will not match any\ngeographical query.\n\n* If an entity only exposes one attribute corresponding to a location, then such an attribute will be used when\nresolving geographical queries.\n\n* If an entity exposes more than one location, then the attribute which contains a metadata property\nnamed ``defaultLocation``, with boolean value ``true``\nwill be taken as the reference location used for resolving geographical queries.\n\n* If there is more than one attribute exposing location but none of them has been labeled as being the\ndefault location, then the query will be declared as ambigous and an HTTP error response with code ``409``\nmust be sent.\n\n* If there is more than one attribute exposing location which has been labeled as being the\n*default location*, then the query will be declared as ambigous and an HTTP error response with code ``409``\nmust be sent. \n\n## Notification messages\n\nNotifications include two fields:\n\n* `subscriptionId` which represents the concerned subscription that originates the notification\n* `data` an array with the notification data itself which includes the entity and attributes concerned. Each\n  element in the array corresponds to a different entity. By default each entity will be represented in\n  normalized mode. However by using the `attrsFormat` modifier it can be requested a simplified representation.\n\nIf `attrsFormat` is `normalized` (or if `attrsFormat` is omitted) then default entity representation is used:\n\n```\n{\n   \"subscriptionId\": \"12345\",\n   \"data\": [\n     {\n       \"id\": \"Room1\",\n       \"type\": \"Room\",\n       \"temperature\": {\n         \"value\": 23,\n         \"type\": \"none\",\n         \"metadata\": {}\n       },\n       \"humidity\": {\n         \"value\": 70,\n         \"type\": \"percentage\",\n         \"metadata\": {}\n       }\n     },\n     {\n     \"id\": \"Room2\",\n     \"type\": \"Room\",\n     \"temperature\": {\n       \"value\": 24,\n       \"type\": \"none\",\n       \"metadata\": {}\n     }\n   ]\n}\n```\n\nIf `attrsFormat` is `keyValues` then keyValues entity partial representation mode is used:\n\n```\n{\n   \"subscriptionId\": \"12345\",\n   \"data\": [\n     {\n       \"id\": \"Room1\",\n       \"type\": \"Room\",\n       \"temperature\": 23,\n       \"humidity\": 70\n       }\n     },\n     {\n     \"id\": \"Room2\",\n     \"type\": \"Room\",\n     \"temperature\": 24\n     }\n   ]\n}\n```\n\n\nIf `attrsFormat` is `values` then values entity partial representation mode is used:\n\n```\n{\n   \"subscriptionId\": \"12345\",\n   \"data\": [ [23, 70], [24] ]\n}\n```\n\nNotifications must include a `Ngsiv2-AttrsFormat` header with the value of `attrsFormat` of the associated subscription,\nso notification receiver can know the format used without needing processing notification payload.\n\n## Custom notifications\n\nNGSIv2 clients can customize HTTP notification messages using a simple template mechanism. The\n`notification.httpCustom` property of a subscription allows to specify the following fields subject\nto be templatized:\n\n* `url`\n* `headers` (both header names and values)\n* `qs` (both in parameter names and values)\n* `payload`\n\nIn addition the HTTP method to be used for delivering the notification can be customized as well using the `method` field,\nbut it cannot be a template.\n\nMacro substitution for templates is based on the syntax `${..}`. In particular:\n\n* `${id}` is replaced by entity id\n* `${type}` is replaced by entity type\n* Any other `${token}` is replaced by the value of attribute which name is `token` or with\n  an empty string if the attribute is not included in the notification. If the value is a number,\n  a bool or null then its string representation is used. If the value is a JSON array or object\n  then its JSON representation as string is used.\n\nExample:\n\nLet\'s consider the following `notification.httpCustom` object in a given subscription.\n\n```\n\"httpCustom\": {\n  \"url\": \"http://foo.com/entity/${id}\",\n  \"headers\": {\n    \"Content-Type\": \"text/plain\"\n  },\n  \"method\": \"PUT\",\n  \"qs\": {\n    \"type\": \"${type}\"\n  },\n  \"payload\": \"The temperature is ${temperature} degrees\"\n}\n```\n\nNow, let\'s consider that NGSIv2 implementation triggers a notification associated to this subscription.\nNotification data is for entity with id \"DC_S1-D41\" and type \"Room\", including an attribute named\n\"temperature\" with value 23.4. The resulting notification after applying the template would be:\n\n```\nPUT http://foo.com/entity/DC_S1-D41?type=Room\nContent-Type: text/plain\nContent-Length: 31\n\nThe temperature is 23.4 degrees\n```\n\nSome considerations to take into account:\n\n* It is the NGSIv2 client\'s responsability to ensure that after substitution the notification is a correct\n  HTTP message (e.g. the Content-Type header is application/xml but the payload doesn\'t correspond to a\n  well-formed XML document). Specifically, if the resulting URL after appliyng the template is malformed,\n  then the notification is skipped.\n* In case the data to notify contains more than one entity, a separate notification (HTTP message) is sent\n  for each of the entities (contrary to default behaviour, which is to send all entities in the same HTTP message).\n\n## Group API Entry Point\n\n### Retrieve API Resources [GET /v2]\n\nThis resource does not have any attributes. Instead it offers the initial\nAPI affordances in the form of the links in the JSON body.\n\nIt is recommended to follow the “url” link values,\n[Link](https://tools.ietf.org/html/rfc5988) or Location headers where\napplicable to retrieve resources. Instead of constructing your own URLs,\nto keep your client decoupled from implementation details.\n\n\n+ Response 200 (application/json)\n\n    + Attributes (object)\n        + entities_url: /v2/entities (required, string) - URL which points to the entities resource\n        + types_url: /v2/types (required, string) - URL which points to the types resource\n        + subscriptions_url: /v2/subscriptions (required, string) - URL which points to the subscriptions resource\n        + registrations_url: /v2/registrations (required, string) - URL which points to the registrations resource\n\n# Group Entities\n\n### List entities [GET /v2/entities{?limit,offset,options,type,id,idPattern,q,georel,geometry,coords,attrs,orderBy}]\n\nRetrieves a list of entities which match different criteria (by id, idPattern, type or those which match\na query or geographical query). A given entity have to match all the criteria to be retrieved\n(i.e. criteria are combined in a logical AND way). Note that id and idPattern parameters are incompatible in the same request.\nSee [Simple Query Language](#simple_query_language) and [Geographical Queries](#geographical_queries). \n\nThe response payload is an Array which contains one object per matching entity. Each entity follows\nthe JSON entity representation format (described in a section above).\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + id: Boe_Idearium (optional, string) - A comma separated list of elements.\n    Retrieve entities which ID match one of the elements in the list. Incompatible with idPattern.\n    \n    + type: Room (optional, string) -  comma separated list of elements.\n    Retrieve entities which type match one of the elements in the list.\n\n    + idPattern: Bode_.* (optional, string) - A correctly formated regular expression.\n    Retrieve entities which ID matches the regular expression. Incompatible with id.\n    \n    + q: temperature>40 (optional, string) - A query expression, composed of a list of statements separated by `;`,\n    i.e. q=statement;statements;statement. See [Simple Query Language specification](#simple_query_language). \n    \n    + georel: near (optional, string) - Spatial relationship between matching entities and a reference\n    shape. See [Geographical Queries](#geographical_queries).\n\n    + geometry: point (optional, string) - Geografical area to which the query is restricted.\n    See [Geographical Queries](#geographical_queries).\n    \n    + coords: 40.6391,-8.6533 (optional, string) - List of latitude-longitude pairs of coordinates separated by \';\'.\n    See [Geographical Queries](#geographical_queries).\n    \n    + limit: 20 (optional, number) - Limits the number of entities to be retrieved\n    \n    + offset: 20 (optional, number) - Establishes the offset from which entities will be returned\n    \n    + attrs: seatNumber (optional, string) - Comma-separated list of attribute names which data will be included in the response.\n    The attributes are retrieved in the order specified by this parameter. If this parameter is not included, all the attributes\n    are retrieved in arbitrary order.\n\n    + orderBy: temperature,!speed (optional, string) - Criteria for ordering results. See \"Ordering results\" section for details.\n    \n    + options (optional, string) - Options dictionary\n      + Members\n          + count - when used, the total number of entities is returned in the response as a HTTP header named `Fiware-Total-Count`.\n          + keyValues - when used, the response payload uses `keyValues` simplified entity representation. See corresponding \n          section for details.\n          + values - when used, the response payload uses `values` simplified entity representation. See corresponding \n          section for details.\n          + unique - when used, the response payload uses `values` simplified entity representation. And, recurring values are left out.\n          See corresponding section for details.\n\n+ Response 200 (application/json)\n\n        [\n         {\n            \"type\": \"Room\",\n            \"id\": \"DC_S1-D41\",\n            \"temperature\": {\n                \"value\": 35.6,\n                \"type\": \"none\",\n                \"metadata\": {}\n            }\n         },\n         {\n            \"type\": \"Room\",\n            \"id\": \"Boe-Idearium\",\n            \"temperature\": {\n                \"value\": 22.5,\n                \"type\": \"none\",\n                \"metadata\": {}\n            }\n         },\n         {\n            \"type\": \"Car\",\n            \"id\": \"P-9873-K\",\n            \"speed\": {\n                \"value\": 100,\n                \"type\": \"number\",\n                \"metadata\": {\n                    \"accuracy\": {\n                        \"value\": 2,\n                        \"type\": \"none\"\n                    },\n                    \"timestamp\": {\n                        \"value\": \"2015-06-04T07:20:27.378Z\",\n                        \"type\": \"date\"\n                    }\n                }\n            }\n         }\n        ]\n\n### Create entity [POST /v2/entities{?options}]\n\nThe payload is an object representing the entity to be created. The object follows\nthe JSON entity representation format (described in a section above).\n\nResponse:\n\n* Successful operation uses 201 Created. Reponse includes a `Location` header with the URL of the\n  created entity.\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Request (application/json)\n\n        {\n            \"type\": \"Room\",\n            \"id\": \"Bcn-Welt\",\n            \"temperature\": {\n                \"value\": 21.7\n            },\n            \"humidity\": {\n                \"value\": 60\n            },\n            \"location\": {\n                \"value\": \"41.3763726, 2.1864475\",\n                \"type\": \"geo:point\",\n                \"metadata\": {\n                    \"crs\": {\n                        \"value\": \"WGS84\"\n                    }\n                }\n            }\n        }\n\n+ Parameters\n    + options (optional, string) - Options dictionary\n      + Members\n          + keyValues - when used, the request payload uses `keyValues` simplified entity representation. See corresponding \n          section for details.\n\n+ Response 201\n\n    + Headers\n\n            Location: /v2/entities/Bcn-Welt?type=Room\n\n\n## Entity by ID [/v2/entities/{entityId}{?type,attrs,options}]\n\n### Retrieve entity [GET /v2/entities/{entityId}{?type,attrs,options}]\n\nThe response is an object representing the entity identified by the ID. The object follows\nthe JSON entity representation format (described in a section above).\n\nThis operation must return only one entity element, but it may happen that there are more\nthan one entity with the same ID (e.g. entities with same ID but different type). In those cases\nan error mesage is returned, specifying in the description the URL that could be used to get\nthe list of conflicting entities, i.e. all the entities with such an ID.\n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId (required, string) - Entity id to be retrieved\n    + type (optional, string) - Entity type, to avoid ambiguity in the case there are several\n    entities with the same entity id.\n    + attrs: temperature,humidity (optional, string) - Comma-separated list of attribute names which\n    data will be included in the response. The attributes are retrieved in the order specified by this parameter.\n    If this parameter is not included, all the attributes are retrieved in arbitrary order.\n    + options (optional, string) - Options dictionary\n      + Members\n          + keyValues - when used, the response payload uses `keyValues` simplified entity representation. See \n          corresponding section for details.\n          + values - when used, the response payload uses `values` simplified entity representation. See corresponding \n          section for details.\n          + unique - when used, the response payload uses `values` simplified entity representation. And, recurring values are left out.\n          See corresponding section for details.\n\n+ Response 200 (application/json)\n\n        {\n            \"type\": \"Room\",\n            \"id\": \"Bcn_Welt\",\n            \"temperature\": {\n                \"value\": 21.7,\n                \"type\": \"none\"\n            },\n            \"humidity\": {\n                \"value\": 60,\n                \"type\": \"none\"\n            },\n            \"location\": {\n                \"value\": \"41.3763726, 2.1864475\",\n                \"type\": \"geo:point\",\n                \"metadata\": {\n                    \"crs\": {\n                        \"value\": \"WGS84\",\n                        \"type\": \"none\"\n                    }\n                }\n            }\n        }\n\n### Retrieve entity attributes [GET /v2/entities/{entityId}/attrs{?type,attrs,options}]\n\nThis request is similar to retreiving the whole entity, however this one omits `id` and `type` fields.\n\nAs the general way of getting a whole entity, this operation must return only one entity element,\nbut it may happen that there are more than one entity with the same ID (e.g. entities with same ID but different type). In those cases\nan error mesage is returned, specifying in the description the URL that could be used to get\nthe list of conflicting entities, i.e. all the entities with such an ID.\n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId (required, string) - Entity id to be retrieved\n    + type (optional, string) - Entity type, to avoid ambiguity in the case there are several\n    entities with the same entity id.\n    + attrs: temperature,humidity (optional, string) - Comma-separated list of attribute names which\n    data will be included in the response. The attributes are retrieved in the order specified by this parameter.\n    If this parameter is not included, all the attributes are retrieved in arbitrary order.\n    + options (optional, string) - Options dictionary\n      + Members\n          + keyValues - when used, the response payload uses `keyValues` simplified entity representation. See\n          corresponding section for details.\n          + values - when used, the response payload uses `values` simplified entity representation. See corresponding\n          section for details.\n          + unique - when used, the response payload uses `values` simplified entity representation. And, recurring values are left out.\n          See corresponding section for details.\n\n+ Response 200 (application/json)\n\n        {\n            \"temperature\": {\n                \"value\": 21.7,\n                \"type\": \"none\"\n            },\n            \"humidity\": {\n                \"value\": 60,\n                \"type\": \"none\"\n            },\n            \"location\": {\n                \"value\": \"41.3763726, 2.1864475\",\n                \"type\": \"geo:point\",\n                \"metadata\": {\n                    \"crs\": {\n                        \"value\": \"WGS84\",\n                        \"type\": \"none\"\n                    }\n                }\n            }\n        }\n\n### Update or append entity attributes [POST /v2/entities/{entityId}/attrs{?type,options}]\n\nThe request payload is an object representing the attributes to append or update. The object follows\nthe JSON entity representation format (described in a section above), except that `id` and `type`\nare not allowed.\n\nThe entity attributes are updated with the ones in the payload. In particular, depending on\nwhether `append` operation option is used or not.\n\n* If `append` is not used: the entity attributes are updated (if they previously exist) or appended\n  (in they don\'t previously exists) with the ones in the payload.\n* If `append` is used (i.e. strict append semantics): all the attributes in the payload not previously\n  existing in the entity are appended. In addition to that, in the case some of the attributes in the\n  payload already exist in the entity, an error is returned.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId (required, string) - Entity id to be updated\n    + type (optional, string) - Entity type, to avoid ambiguity in the case there are several\n    entities with the same entity id.\n    + options (optional, string) - Operations options\n        + Members\n            + append - Force an append operation\n            + keyValues - when used, the request payload uses `keyValues` simplified entity representation. See \n            corresponding section for details.\n\n+ Request (application/json)\n\n    + Body\n\n            {\n                \"ambientNoise\": {\n                    \"value\": 31.5\n                }\n            }\n\n+ Response 204\n\n### Update existing entity attributes [PATCH /v2/entities/{entityId}/attrs{?type,options}]\n\nThe request payload is an object representing the attributes to update. The object follows\nthe JSON entity representation format (described in a section above), except that `id` and `type`\nare not allowed.\n\nThe entity attributes are updated with the ones in the payload. In addition to that, if one or more\nattributes in the payload doesn\'t exist in the entity, an error if returned.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters \n    + entityId (required, string) - Entity id to be updated\n    + type (optional, string) - Entity type, to avoid ambiguity in the case there are several\n    entities with the same entity id.\n    + options (optional, string) - Operations options\n        + Members\n            + keyValues - when used, the request payload uses `keyValues` simplified entity representation. See \n            corresponding section for details.\n\n+ Request (application/json)\n\n        {\n            \"temperature\": {\n                \"value\": 25.5\n            },\n            \"seatsNumber\": {\n                \"value\": 6\n            }\n        }\n\n+ Response 204\n\n### Replace all entity attributes [PUT /v2/entities/{entityId}/attrs{?type,options}]\n\nThe request payload is an object representing the new entity attributes. The object follows\nthe JSON entity representation format (described in a section above), except that `id` and `type`\nare not allowed.\n\nThe attributes previously existing in the entity are removed and replaced by the ones in the\nrequest.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters \n    + entityId (required, string) - Entity id\n    + type (optional, string) - Entity type, to avoid ambiguity in the case there are several\n    entities with the same entity id.\n    + options (optional, string) - Operations options\n        + Members\n            + keyValues - when used, the request payload uses `keyValues` simplified entity representation. See \n            corresponding section for details.\n\n+ Request (application/json)\n\n        {\n            \"temperature\": {\n                \"value\": 25.5\n            },\n            \"seatsNumber\": {\n                \"value\": 6\n            }\n        }\n\n+ Response 204\n\n### Remove entity [DELETE /v2/entities/{entityId}{?type}]\n\nDelete the entity.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters \n    + entityId (required, string) - Entity id to be deleted\n    + type (optional, string) - Entity type, to avoid ambiguity in the case there are several\n    entities with the same entity id.\n\n+ Response 204\n\n\n# Group Attributes\n\n## Attribute by Entity ID [/v2/entities/{entityId}/attrs/{attrName}{?type}]\n\n### Get attribute data [GET /v2/entities/{entityId}/attrs/{attrName}{?type}]\n\nReturns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes\n(described in a section above).\n\nResponse:\n\n* Successful operation uses 20O OK.\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + type (optional, string) - Entity type, to avoid ambiguity in the case there are several\n    entities with the same entity id.\n    + attrName: temperature (required, string) - Attribute to be retrieved.\n\n+ Response 200 (application/json)\n\n        {\n            \"value\": 21.7,\n            \"type\": \"none\",\n            \"metadata\": {}\n        }\n\n### Update attribute data [PUT /v2/entities/{entityId}/attrs/{attrName}{?type}]\n\nThe request payload is an object representing the new attributes data. Previous attribute data\nis replaced by the one in the request. The object follows the JSON representation for attributes\n(described in a section above).\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + type (optional, string) - Entity type, to avoid ambiguity in the case there are several\n    entities with the same entity id.\n    + attrName: temperature (required, string) - Attribute name\n\n+ Request (application/json)\n\n        {\n            \"value\": 25.0,\n            \"metadata\": {\n                \"unitCode\": {\n                   \"value\": \"CEL\"\n                }\n            }\n        }\n\n+ Response 200\n\n\n### Remove a single attribute [DELETE /v2/entities/{entityId}/attrs/{attrName}{?type}]\n\nRemoves an entity attribute.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + type (optional, string) - Entity type, to avoid ambiguity in the case there are several\n    entities with the same entity id.\n    + attrName: temperature (required, string) - Attribute name\n\n+ Response 204\n\n\n# Group Attribute Value\n\n## By Entity ID [/v2/entities/{entityId}/attrs/{attrName}/value?{type}]\n\n### Get attribute value [GET /v2/entities/{entityId}/attrs/{attrName}/value{?type}]\n\nIt returns the `value` property with the value of the attribute.\n\n* If response payload MIME type is `application/json`:\n  * If attribute value is a JSON object or array, the payload in that JSON object or array\n  * If attribute value is a string, number, null or boolean, a HTTP error \"406 Not Acceptable: accepted MIME types:\n    text/plain\" is returned.\n* If response payload MIME type is `text/plain`,\n  * If attribute value is a JSON object or array, the payload in a stringification of that JSON object or array.\n  * If attribute value is a string, number, null or boolean, the payload is a text representation of that value. In the case\n    of a string, citation marks are used at the begining and end.\n\nThe payload MIME type in responses is based on client-server HTTP negotiation, based on client `Accept` header.\n\nResponse:\n\n* Successful operation uses 20O OK.\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + type (optional, string) - Entity type, to avoid ambiguity in the case there are several\n    entities with the same entity id.\n    + attrName: temperature (required, string) - Attribute to be retrieved.\n\n+ Response 200 (application/json)\n\n        {\n            \"address\": \"Ronda de la Comunicacion s/n\",\n            \"zipCode\": 28050,\n            \"city\": \"Madrid\",\n            \"country\": \"Spain\"\n        }\n\n### Update attribute value [PUT /v2/entities/{entityId}/attrs/{attrName}/value{?type}]\n\nThe request payload is the new attribute value.\n\n* If the request payload MIME type is `application/json`, then the value of the attribute is set to the JSON object or array\n  coded in the payload (if the payload is not a valid JSON document, then an error is returned).\n* If the request payload MIME type is `text/plain`, then the following algorithm is applied to the payload:\n  * If the payload starts and ends with citation-marks (`\"`), the value is taken as a string (the citation marks themselves are not\n    considered part of the string)\n  * If `true` or `false`, the value is taken as a boolean.\n  * If `null`, the value is taken as null.\n  * If these first three tests \'fail\', the text is interpreted as a number.\n  * If not a number, then an error is returned and the attribute\'s value is unchanged.\n\nThe payload MIME type in request is specified in the `Content-Type` HTTP header.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Entity ID\n    + type (optional, string) - Entity type, to avoid ambiguity in the case there are several\n    entities with the same entity id.\n    + attrName: temperature (required, string) - Attribute name\n\n+ Request (application/json)\n\n        {\n            \"address\": \"Ronda de la Comunicacion s/n\",\n            \"zipCode\": 28050,\n            \"city\": \"Madrid\",\n            \"country\": \"Spain\"\n        }\n\n+ Response 200\n\n# Group Types\n\n## Entity types [/v2/types{?limit,offset,options}]\n\n### Retrieve entity types [GET /v2/types/{?limit,offset,options}]\n\nIf `values` option is not in use, the operation returns a JSON array with the entity types. Each element\nis a JSON object with information about the type:\n\n* `type` : the entity type name.\n* `attrs` : the set of attribute names along with all the entities of such type, represented in\n  a JSON object whose keys are the attribute names and whose values contain information of such\n  attributes (in particular a list of the types used by attributes with that name along all the\n  entities).\n* `count` : the number of entities belonging to that type.\n\nIf `values` option is used, the operation returns a JSON array with the list of entity type names as strings.\n\nResults are ordered by entity `type` in alphabetical order.\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + limit: 10 (optional, number) - Limit the number of types to be retrieved\n    + offset: 20 (optional, number) - Skip a number of records\n    + options (optional, string) - Options dictionary\n      + Members\n          + count - when used, the total types number is returned as a HTTP in the response named `Fiware-Total-Count`\n          + values - when used, the response payload is a JSON array with a list of entity types\n\n+ Response 200 (application/json)\n\n        [\n          {\n            \"type\": \"Car\",\n            \"attrs\": {\n              \"speed\": {\n                \"types\": [ \"none\" ]\n              },\n              \"fuel\": {\n                \"types\": [ \"gasoline\", \"diesel\" ]\n              },\n              \"temperature\": {\n                \"types\": [ \"urn:phenomenum:temperature\" ]\n              }\n            },\n            \"count\": 12\n          },\n          {\n            \"type\": \"Room\",\n            \"attrs\": {\n              \"pressure\": {\n                \"types\": [ \"none\" ]\n              },\n              \"humidity\": {\n                \"types\": [ \"percentage\" ]\n              },\n              \"temperature\": {\n                \"types\": [ \"urn:phenomenum:temperature\" ]\n              }\n            },\n            \"count\": 7\n          }\n        ]\n\n## Entity type [/v2/types/{entityType}]\n\n### Retrieve entity type [GET /v2/types/{entityType}]\n\nThe operation returns a JSON object with information about the type:\n\n* `attrs` : the set of attribute names along with all the entities of such type, represented in\n  a JSON object whose keys are the attribute names and whose values contain information of such\n  attributes (in particular a list of the types used by attributes with that name along all the\n  entities).\n* `count` : the number of entities belonging to that type.\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + entityType: Room (required, string) - Entity Type\n\n+ Response 200 (application/json)\n\n          {\n            \"attrs\": {\n              \"pressure\": {\n                \"types\": [ \"none\" ]\n              },\n              \"humidity\": {\n                \"types\": [ \"percentage\" ]\n              },\n              \"temperature\": {\n                \"types\": [ \"urn:phenomenum:temperature\" ]\n              }\n            },\n            \"count\": 7\n          }\n\n# Group Subscriptions\n\nA subscription is represented by a JSON object with the following fields:\n\n+ `id`: Subscription unique identifier. Automatically created at creation time.\n+ `description` (optional): A free text used by the client to describe the subscription.\n+ `subject`: It is an object that describes the subject of the subscription.\n+ `notification`: It is an object that describes the notification received by the subscriber.\n+ `expires`: Subscription expiration date in ISO8601 format. Permanent subscriptions must omit\n   this field.\n+ `status`: Either `active` (for active subscriptions) or `inactive` (for inactive subscriptions).\n  If this field is not provided at subscription creation time, new subscriptions are created with\n  the `active` status, which can be changed by clients afterwards. For expired subscriptions this\n  attribute is set to `expired` value (no matter if the client updates it to `active`/`inactive`).\n+ `throttling`: Minimal period of time in seconds which must elapse between two consecutive notifications. It\n  is optional.\n\nA `subject` contains the following subfields:\n\n+ `entities`: A list of objects, each one composed of the following subfields (`id`/`idPattern` or `type` must be present):\n    + `id` or `idPattern`: Id or pattern of the affected entities. Both cannot be used at the same time, but at least one of them must be set.\n    + `type`: Type of the affected entities (optional).\n+ `condition`: Condition that will trigger the notification. It can have two optional properties:\n    + `attrs`: array of attribute names\n    + `expression`: an expression composed of `q`, `georel`, `geometry` and `coords` (see \"List entities\" operation above\n   about this field).\n\nA `notification` object contains the following subfields:\n\n+ `attrs`: List of attributes to be included in the notification message. If not specified (or empty), all attributes are included\n  in the notification. It also defines the order in which attributes will appear in notifications when `attrsFormat` `value` is used\n  (see \"Notification messages\" section).\n+ `http` or `httpCustom` (one of them has to be used, but not both at the same time): It is used to convey parameters\n  for notifications delivered through the HTTP protocol.\n+ `attrsFormat` (optional): specifies how the entities will be represented in notifications. Accepted values are\n  `normalized` (the one used if the field is omitted), `keyValues` or `values`. If `attrsFormat` takes any value different\n  than those an error will be raised. See detail in \"Notification messages\" section.\n+ `timesSent` (not editable, only in GET operations): Number of notifications sent due to this subscription.\n+ `lastNotification`: Last notification date in ISO8601 format.\n\nAn `http` object contains the following subfields:\n\n+ `url` : URL referencing the service which is invoked when a notification is generated. A NGSIv2\n  compliant server must support `http` URL schema, other schemas could also be supported.\n\nAn `httpCustom` object contains the following subfields.\n\n+ `url`: same as in `http` above.\n+ `headers` (optional): a key-map of HTTP headers that are included in the notification messages.\n+ `qs` (optional): a key-map of URL query parameters that are included in the notification message.\n+ `method` (optional): the method to use for sending the notification (default is POST). Only valid HTTP methods are allowed.\n   On specifying an invalid HTTP method, a 400 Bad Request error is returned.\n+ `payload` (optional): the payload to be used in the notification. If omitted, the default payload (see\n  \"Notification messages\" sections) is used.\n\nIf `httpCustom` is used, then the considerations described in \"Custom notifications\" section apply.\n\nNotification rules are as follow:\n\n* If `attrs` and `expression` are used, a notification is sent whenever one of the attributes in the `attrs` list changes and\n  at the same time `expression` matches.\n* If `attrs` is used and `expression` is not used, a notification is sent whenever one of the attributes in the `attrs` list changes-\n* If `attrs` is not used and `expression` is used, a notification is sent whenever any of the attributes of the entity changes and\n  at the same time `expression` matches.\n* If neither `attrs` or `expression` are used, a notification is sent whenever any of the attributes of the entity changes.\n\n## Subscription List [/v2/subscriptions]\n\n### Retrieve subscriptions [GET /v2/subscriptions]\n\nReturns a list of all the subscriptions present in the system\n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + limit: 10 (optional, number) - Limit the number of types to be retrieved\n    + offset: 20 (optional, number) - Skip a number of records\n    + options (optional, string) - Options dictionary\n      + Members\n          + count - when used, the total subscriptions number is returned as a HTTP in the response named `Fiware-Total-Count`\n\n+ Response 200\n\n        [\n            {\n                \"id\": \"abcdefg\",\n                \"description\": \"One subscription to rule them all\",\n                \"subject\": {                    \n                    \"entities\": [\n                        {\n                            \"id\": \"Bcn_Welt\",\n                            \"type\": \"Room\"\n                        }\n                    ],\n                    \"condition\": {\n                       \"attrs\": [ \"temperature \" ],\n                       \"expression\": {\n                          \"q\": \"temperature>40\"\n                       }\n                    }\n                },\n                \"notification\": {\n                    \"httpCustom\": {\n                      \"url\": \"http://localhost:1234\",\n                      \"headers\": {\n                        \"X-MyHeader\": \"foo\"\n                      },\n                      \"qs\": {\n                        \"authToken\": \"bar\"\n                      }\n                    },\n                    \"attrsFormat\": \"keyValues\",\n                    \"attrs\": [\"temperature\", \"humidity\"],\n                    \"timesSent\": 12,\n                    \"lastNotification\": \"2015-10-05T16:00:00.00Z\"\n                },\n                \"expires\": \"2016-04-05T14:00:00.00Z\",\n                \"status\": \"active\",\n                \"throttling\": 5\n            }\n        ]\n\n\n### Create a new subscription [POST /v2/subscriptions]\n\nCreates a new subscription.\nThe subscription is represented by a JSON object as described at the beginning of this section.\n\nResponse:\n\n* Successful operation uses 201 Created\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Request (application/json)\n\n        {\n            \"description\": \"One subscription to rule them all\",\n            \"subject\": {\n                \"entities\": [\n                    {\n                        \"idPattern\": \".*\",\n                        \"type\": \"Room\"\n                    }\n                ],\n                \"condition\": {\n                    \"attrs\": [ \"temperature\" ],\n                    \"expression\": {\n                       \"q\": \"temperature>40\"\n                    }\n                 }\n            },\n            \"notification\": {\n                \"http\": {\n                  \"url\": \"http://localhost:1234\"\n                },\n                \"attrs\": [\"temperature\", \"humidity\"]\n            },            \n            \"expires\": \"2016-04-05T14:00:00.00Z\",\n            \"throttling\": 5\n        }\n\n+ Response 201\n\n    + Headers\n\n            Location: /v2/subscriptions/abcde98765\n\n\n## Subscription By ID [/v2/subscriptions/{subscriptionId}]\n\n### Retrieve subscription [GET /v2/subscriptions/{subscriptionId}]\n\nThe response is the subscription represented by a JSON object as described at the beginning of this section.\n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + subscriptionId: abcdef (required, string) - subscription Id.\n\n+ Response 200 (application/json)\n\n        {\n            \"id\": \"abcdef\",\n            \"description\": \"One subscription to rule them all\",\n            \"subject\": {\n                \"entities\": [\n                    {\n                        \"idPattern\": \".*\",\n                        \"type\": \"Room\"\n                    }\n                ],\n                \"condition\": {\n                    \"attrs\": [ \"temperature \" ],\n                    \"expression\": {\n                       \"q\": \"temperature>40\"\n                    }\n                 }\n            },\n            \"notification\": {\n                \"http\": {\n                  \"url\": \"http://localhost:1234\"\n                },\n                \"attrs\": [\"temperature\", \"humidity\"],\n                \"timesSent\": 12,\n                \"lastNotification\": \"2015-10-05T16:00:00.00Z\"\n            },\n            \"expires\": \"2016-04-05T14:00:00.00Z\",\n            \"status\": \"active\",\n            \"throttling\": 5,\n        }\n\n\n### Update subscription [PATCH /v2/subscriptions/{subscriptionId}]\n\nOnly the fields included in the request are updated in the subscription.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + subscriptionId: abcdef (required, string) - subscription Id.\n\n+ Request (application/json)\n\n        {\n            \"expires\": \"2016-04-05T14:00:00.00Z\"\n        }\n\n+ Response 204\n\n### Delete subscription [DELETE /v2/subscriptions/{subscriptionId}]\n\nCancels subscription.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + subscriptionId: abcdef (required, string) - subscription Id.\n\n+ Response 204\n\n# Group Registrations\n\nContext Registration allows to associate external services to context data. One of the main\nuse cases of this functionality is the association of Context Providers.\n\nA context registration is represented by a JSON object with the following fields:\n\n+ `id`       : Unique identifier assigned to the registration. Automatically generated at creation time.\n+ `subject`  : It is an object that describes the subject of the registration.\n+ `callback` : URL which denotes the end point of the registered service. It is optional, as it can be\nundefined under certain conditions, for instance, transient unavailability of the provider.\n+ `metadata` : An optional JSON object which allows to associate extra metadata properties to the registration.\nIt must follow the same representation conventions as context attribute metadata (See JSON Attribute Representation). \n+ `duration` : Duration of the registration in ISO8601 format. Default duration is infinite.\n\nA `subject` contains the following subfields:\n\n+ `entities`: A list of objects, each one composed of the following subfields (`id`/`idPattern` or type must be present):\n    + `id` or `idPattern`: Id or pattern of the affected entities. Both cannot be used at the same time, but at least one of them must be set.\n    + `type`: Type of the affected entities (optional).\n+ `attributes`: List of attributes to be provided (if not specified it would mean all).\n\n## Registration list [/v2/registrations]\n\n### Retrieve registrations [GET /v2/registrations]\n\nLists all the registrations present in the system.\n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Response 200\n\n        [\n            {\n                \"id\": \"abcdefg\",\n                \"subject\": {\n                    \"entities\": [\n                        {\n                            \"id\": \"Bcn_Welt\",\n                            \"type\": \"Room\"\n                        }\n                    ],\n                    \"attributes\": [\n                        \"temperature\"\n                    ]\n                },\n                \"callback\": \"http://weather.example.com/ngsi\",\n                \"metadata\": {\n                    \"providingService\": {\n                       \"value\": \"weather.example.com\",\n                       \"type\": \"none\"\n                     },\n                    \"providingAuthority\": {\n                       \"value\": \"AEMET - Spain\",\n                       \"type\": \"none\"\n                     }\n                },\n                \"duration\": \"PT1M\"\n            }\n        ]\n\n### Create a new context provider registration [POST /v2/registrations]\n\nCreates a new registration. This is typically used for associating context providers\nto certain data.\nThe registration is represented by a JSON object as described at the beginning of this section.\n\nResponse:\n\n* Successful operation uses 201 Created\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Request (application/json)\n\n        {\n            \"subject\": {\n                \"entities\": [\n                    {\n                        \"id\": \"room2\",\n                        \"type\": \"Room\"\n                    }\n                ],\n                \"attributes\": [\n                      \"humidity\"\n                ]\n            },\n            \"callback\":  \"http://localhost:1234\",\n            \"metadata\" : {\n                \"provider\": {\n                   \"value\": \"example.com\"\n                }\n            },\n            \"duration\": \"PT1M\"\n        }\n\n+ Response 201\n\n    + Headers\n\n            Location: /v2/registrations/abcde98765\n\n## Registration By ID [/v2/registrations/{registrationId}]\n\n### Retrieve context provider registration [GET /v2/registrations/{registrationId}]\n\nThe response is the registration represented by a JSON object as described at the beginning of this section.\n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + registrationId: abcdef (required, string) - registration Id.\n\n+ Response 200 (application/json)\n\n        {\n            \"id\": \"abcde\",\n            \"subject\": {\n                \"entities\": [\n                    {\n                        \"id\": \"room2\",\n                        \"type\": \"Room\"\n                    }\n                ],\n                \"attributes\": [\n                      \"humidity\"\n                ]\n            },\n            \"callback\":  \"http://localhost:1234\",\n            \"duration\": \"PT1M\"\n        }\n\n### Update context provider registration [PATCH /v2/registrations/{registrationId}]\n\nOnly the fields included in the request are updated in the registration.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + registrationId: abcdef (required, string) - registration Id.\n\n+ Request (application/json)\n\n        {\n            \"duration\": \"PT1M\"\n        }\n\n+ Response 204\n\n### Delete context provider registration [DELETE /v2/registrations/{registrationId}]\n\nCancels registration.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + registrationId: abcdef (required, string) - registration Id.\n\n+ Response 204\n\n# Group POJ RPC Operations\n\n### Update [POST /v2/op/update]\n\nThis operation allows to create, update and/or delete several entities in a single batch operation.\nThe payload is an object with two properties:\n\n+ `actionType`, to specify the kind of update action to do: either APPEND, APPEND_STRICT, UPDATE, DELETE.\n+ `entities`, an array of entities, each one specified using the JSON entity representation format (described\n  in a section above).\n\nResponse:\n\n* Successful operation uses 204 No Content.\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Request (application/json)\n\n        {\n            \"actionType\": \"APPEND\",\n            \"entities\": [\n                {\n                    \"type\": \"Room\",\n                    \"id\": \"Bcn-Welt\",\n                    \"temperature\": 21.7,\n                    \"humidity\": 60\n                },\n                {\n                    \"type\": \"Room\",\n                    \"id\": \"Mad_Aud\",\n                    \"temperature\": 22.9,\n                    \"humidity\": 85\n                }\n            ]\n        }\n\n+ Parameters\n    + options (optional, string) - Options dictionary\n      + Members\n          + keyValues - when used, the request payload uses `keyValues` simplified entity representation. See corresponding \n          section for details.\n\n+ Response 204\n\n\n### Query [POST /v2/op/query{?limit,offset,options}]\n\nThe response payload is an Array which contains one object per matching entity. Each entity follows\nthe JSON entity representation format (described in a section above).\n\nThe payload may contain the following elements (all of them optional):\n\n+ `entities`: a list of entites to search for. Each entity is represented by a JSON object with the following\n  elements:\n    + `id` or `idPattern`: Id or pattern of the affected entities. Both cannot be used at the same time, but at least one of them must be set.\n    + `type`: specifies the type of the entities to search for. If omitted, it means \"any entity type\".\n+ `attributes`: a list of attributes names to search for. If omitted, it means \"any attribute\".\n+ `scopes`: a list of scopes to restrict the results of the query. Each scope is represented by a JSON\n   object with a `type` (a JSON string) and `value` (whose type depends on the `type` property). The\n   different available scopes are described elsewhere.\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + limit: 10 (optional, number) - Limit the number of entities to be retrieved\n    + offset: 20 (optional, number) - Skip a number of records\n    + orderBy: temperature,!speed (optional, string) - Criteria for ordering results. See \"Ordering results\" section for details.\n    + options (optional, string) - Options dictionary\n      + Members\n          + count - the total number of entities is returned in the response as an\n          HTTP header named `Fiware-Total-Count`.\n          + keyValues - when used, the response payload uses `keyValues` simplified entity representation. See corresponding\n          section for details.\n          + values - when used, the response payload uses `values` simplified entity representation. See corresponding\n          section for details.\n          + unique - when used, the response payload uses `values` simplified entity representation. And, recurring values are left out.\n          See corresponding section for details.\n\n\n+ Request (application/json)\n\n        {\n            \"entities\": [\n                {\n                    \"idPattern\": \".*\",\n                    \"type\": \"myFooType\"\n                },\n                {\n                    \"id\": \"myBar\",\n                    \"type\": \"myBarType\"\n                }\n            ],\n            \"attributes\": [\n                \"temperature\",\n                \"humidity\"\n            ],\n            \"scopes\": [\n                {\n                    \"type\": \"FIWARE::...\",\n                    \"value\": \"...\"\n                }\n            ]\n        }\n\n+ Response 200 (application/json)\n\n        [\n         {\n            \"type\": \"Room\",\n            \"id\": \"DC_S1-D41\",\n            \"temperature\": {\n              \"value\": 35.6,\n              \"type\": \"none\"\n            }\n         },\n         {\n            \"type\": \"Room\",\n            \"id\": \"Boe-Idearium\",\n            \"temperature\": {\n              \"value\": 22.5,\n              \"type\": \"none\"\n            }\n         },\n         {\n            \"type\": \"Car\",\n            \"id\": \"P-9873-K\",\n            \"speed\": {\n                \"value\": 100,\n                \"type\": \"number\",\n                \"accuracy\": 2,\n                \"timestamp\": {\n                    \"value\": \"2015-06-04T07:20:27.378Z\",\n                    \"type\": \"date\"\n                }\n            }\n         }\n        ]\n\n\n### Register [POST /v2/op/register]\n\nThis operation allows to create, update and/or delete several registrations in a single batch operation.\nThe payload is an object with two properties:\n\n+ `actionType`, to specify the kind of register action to do: either CREATE, UPDATE, DELETE.\n+ `registrations`, an array of registration, each one specified using the JSON registration representation\n  format (described in a section above). In the case of CREATE operation, the registration `id` must not be\n  included.\n\nResponse:\n\n* Successful operation uses 200 OK. In addition, in the case of successful CREATE, a list of IDs is returned,\n  each one corresponding to the ID of the element in the request payload and in the same order.\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Request (application/json)\n\n        {\n          \"actionType\": \"CREATE\",\n          \"registrations\": [\n             {\n               \"subject\": {\n                  \"entities\": [\n                     {\n                        \"type\": \"Room\"\n                     }\n                  ],\n                  \"attributes\": [\n                     \"humidity\"\n                 ]\n               },\n               \"callback\": \"http://localhost:1234\",\n               \"duration\": \"PT1M\"\n             },\n             {\n               \"subject\": {\n                 \"entities\": [\n                    {\n                       \"type\": \"Car\"\n                    }\n                 ],\n                 \"attributes\": [\n                   \"speed\"\n                 ]\n               },\n               \"callback\": \"http://localhost:5678\",\n               \"duration\": \"PT1M\"\n             }\n          ]\n        }\n\n+ Response 200\n\n        [\n          \"abcd\",\n          \"efgh\"\n        ]\n\n\n### Discover [POST /v2/op/discover/{?limit,offset,options}]\n\nThe response payload is an Array which contains one object per matching registration. Each registration follows\nthe JSON registration representation format (described in a section above).\n\nThe payload may contain the following elements (all of them optional):\n\n+ `entities`: a list of entites to search for. Each entity is represented by a JSON object with the following\n  elements:\n    + `id` or `idPattern`: Id or pattern of the affected entities. Both cannot be used at the same time, but at least one of them must be set.\n    + `type`: specifies the type of the entities to search for. If omitted, it means \"any entity type\".\n+ `attributes`: a list of attributes names to search for. If omitted, it means \"any attribute\".\n+ `scopes`: a list of scopes to restrict the results of the query. Each scope is represented by a JSON\n   object with a `type` (a JSON string) and `value` (whose type depends on the `type` property). The\n   different available scopes are described elsewhere.\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Errors use a non-200 and (optionally) an error payload. See subsection on Error Responses for more details.\n\n+ Parameters\n    + limit: 10 (optional, number) - Limit the number of registrations to be retrieved\n    + offset: 22 (optional, number) - Skip a number of registrations\n    + options (optional, string) - Options dictionary\n        + Members\n          + count - when used, the total number of registrations is returned in the response as a HTTP header named `Fiware-Total-Count`\n\n\n+ Request (application/json)\n\n        {\n          \"entities\": [\n            {\n              \"idPattern\": \".*\",\n              \"type\": \"myFooType\"\n            },\n            {\n              \"id\": \"myBar\",\n              \"type\": \"myBarType\"\n            }\n          ],\n          \"attributes\": [\n            \"temperature\",\n            \"humidity\"\n          ],\n          \"scopes\": [\n            {\n              \"type\": \"FIWARE::Filter::Foo\",\n              \"value\": \"Bar\"\n            }\n          ]\n        }\n\n+ Response 200 (application/json)\n\n        [\n          {\n            \"id\": \"abcde\",\n            \"subject\": {\n              \"entities\": [\n                {\n                  \"id\": \"Foo\",\n                  \"type\": \"myFooType\"\n                }\n              ],\n              \"attributes\": [\n                \"humidity\"\n              ]\n            },\n            \"callback\": \"http://localhost:1234\",\n            \"duration\": \"PT1M\"\n          },\n          {\n            \"id\": \"efgh\",\n            \"subject\": {\n              \"entities\": [\n                {\n                  \"id\": \"myBar\",\n                  \"type\": \"myBarType\"\n                }\n              ],\n              \"attributes\": [\n                \"speed\"\n              ]\n            },\n            \"callback\": \"http://localhost:5678\",\n            \"duration\": \"PT1M\"\n          }\n        ]\n\n# Group OMA-NGSI Operations\n\n(The need/usefulness of these operations is currently under discussion)\n\nFor the sake of completeness here is an enumeration of the OMA-NGSI (9 & 10) operations. These\noperations will be supported under the \'v2\' resource as well.\n\n### subscribeContext [POST /v2/subscribeContext]\n\n(Not needed, a it is covered by the RESTful POST /v2/subscriptions operation)\n\n### updateContextSubscription [POST /v2/updateContextSubscription]\n\n(Not needed, a it is covered by the RESTful PATCH /v2/subscriptions operation)\n\n### unsubscribeContext [POST /v2/unsubscribeContext]\n\n(Not needed, a it is covered by the RESTful DELETE /v2/subscriptions operation)\n\n### notifyContext [POST /v2/notifyContext]\n\n(The payload of the v2 notifyContext should be described)\n\n### subscribeContextAvailability [POST /v2/subscribeContextAvailability]\n\n(Not needed as POJ RPC, but we need to define a RESTful operation for this, analogous to the NGSI10 one)\n\n### updateContextAvailabilitySubscription [POST /v2/updateContextAvailabilitySubscription]\n\n(Not needed as POJ RPC, but we need to define a RESTful operation for this, analogous to the NGSI10 one)\n\n### unsubscribeContextAvailability [POST /v2/unsubscribeContextAvailability]\n\n(Not needed as POJ RPC, but we need to define a RESTful operation for this, analogous to the NGSI10 one)\n\n### notifyContextAvailability [POST /v2/notifyContextAvailability]\n\n(The payload of the v2 notifyContextAvailability should be described)\n"
    });
  </script>
</body>
</html>
