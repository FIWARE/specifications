<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>fiware-ngsiv2-reference</title>
</head>
<body>
  <script src="https://api.apiary.io/seeds/embed.js"></script>
  <script>
    var embed = new Apiary.Embed({
      apiBlueprint: "FORMAT: 1A\nHOST: http://orion.lab.fiware.org\nTITLE: FIWARE-NGSI v2 Specification (WIP)\nDATE: to be fixed upon next RC production\nVERSION: latest\nPREVIOUS_VERSION: stable\nAPIARY_PROJECT: orioncontextbroker\nSPEC_URL: https://telefonicaid.github.io/fiware-orion/api/v2/\nGITHUB_SOURCE: http://github.com/telefonicaid/fiware-orion.git\n\n# FIWARE-NGSI v2 Specification\n\nThis specification defines the FIWARE-NGSI version 2 API. FIWARE-NGSI v2 is intended to manage\nthe entire lifecycle of context information, including updates, queries, registrations,\nand subscriptions.\n\n# Preface\n\n## Editors\n\nJosé Manuel Cantera Fonseca (FIWARE Foundation e.V., formerly with Telefónica I+D), \nFermín Galán Márquez (Telefónica España, formerly with Telefónica I+D),\nTobias Jacobs (NEC).\n  \n## Acknowledgements\n\nThe editors would like to express their gratitude to the following people who actively\ncontributed to this specification:\nJuan José Hierro (FIWARE Foundation e.V., formerly with Telefónica I+D), \nMarcos Reyes (Telefónica España, formerly with Telefónica I+D), \nKen Zangelin (APInf, formerly with Telefónica I+D),\nIván Arias León (Telefónica I+D), Carlos Romero Brox (Telefónica I+D),\nAntonio José López Navarro (Telefónica I+D),  Marc Capdevielle (Orange), Gilles Privat (Orange), \nSergio García Gómez (Telefónica I+D), Martin Bauer (NEC).\n  \n## Status\n\nThis is a work in progress and is changing on a daily basis.\nPlease send your comments to fiware-ngsi@lists.fiware.org.\nYou can trace the discussions checking the archives of the mailing list:\nhttps://lists.fiware.org/private/fiware-ngsi/ (list subscription required).\n\n## Copyright\n\nCopyright (c) 2011-2018 Telecom Italia, Telefónica I+D and NEC.\n\n## License\n\nThis specification is licensed under the\n[FIWARE Open Specification License (implicit patent license)](https://forge.fiware.org/plugins/mediawiki/wiki/fiware/index.php/Implicit_Patents_License).\n\n## Conformance\n\nThis specification describes the \"full\" compliance level.\n\n## Conventions\n\nNGSI version 2 uses camel case (camelCase) syntax for naming properties and related artifacts used\nby the API. When  referring to URIs, as part of HATEOAS patterns, and to mark them appropriately,\nthe suffix `_url` is added.\n\n# Specification\n\n## Introduction\n\nThe FIWARE NGSI (Next Generation Service Interface) API defines \n\n* a **data model** for context information, based on a simple information model using the notion of\n  *context entities*\n* a **context data interface** for exchanging information by means of query, subscription, and\n  update operations\n* a **context availability interface** for exchanging information on how to obtain context\n  information (whether to separate the two interfaces is currently under discussion).\n\n## Terminology\n\n### Context data modelling and exchange\n\nThe main elements in the NGSI data model are context entities, attributes and metadata,\nas shown in the figure below.\n\n![NGSI data model](https://raw.githubusercontent.com/telefonicaid/fiware-orion/master/doc/apiary/v2/Ngsi-data-model.png)\n\n#### Context Entities\n\nContext entities, or simply entities, are the center of gravity in the FIWARE NGSI information \nmodel. An entity represents a thing, i.e., any physical or logical object (e.g., a sensor, a person,\na room, an issue in a ticketing system, etc.). Each entity has an **entity id**.\n\nFurthermore, the type system of FIWARE NGSI enables entities to have \nan **entity type**. Entity types are semantic types; they are intended\nto describe the type of thing represented by the entity.\nFor example, a context entity with id *sensor-365* could have the\ntype *temperatureSensor*.\n\nEach entity is uniquely identified by the combination of its id and type.\n\n#### Context Attributes \n\nContext attributes are properties of context entities.\nFor example, the current speed of a car could be modeled as\nattribute *current_speed* of entity *car-104*.\n\nIn the NGSI data model, attributes have an *attribute name*,\nan *attribute type*, an *attribute value* and *metadata*. \n* The attribute name describes what kind of property the attribute value represents of the entity,\nfor example *current_speed*.\n* The attribute type represents the NGSI value type of the attribute value.\nNote that FIWARE NGSI has its own type system for attribute values, so NGSI value types are not\nthe same as JSON types.\n* The attribute value finally contains\n  * the actual data\n  * optional **metadata** describing properties of the attribute value like e.g. accuracy, provider,\n    or a timestamp\n  \n#### Context Metadata\n\nContext metadata is used in FIWARE NGSI in several places, one of\nthem being an optional part of the attribute value as described\nabove. Similar to attributes, each piece of metadata has:\n * **a metadata name**, describing the role of the metadata in the\n place where it occurs; for example, the metadata name *accuracy* \n indicates that the metadata value describes how accurate a given \n attribute value is\n * a **metadata type**, describing the NGSI value type of the metadata value\n * a **metadata value** containing the actual metadata\n\nNote that in NGSI it is not foreseen that metadata may contain nested metadata.\n\n## MIME Types\n\nThe API response payloads in this specification are based on `application/json` and  (for attribute value \ntype operation) `text/plain` MIME types. Clients issuing HTTP requests with accept types different \nthan those will get a `406 Not Acceptable` error.\n\n## JSON Entity Representation\n\nAn entity is represented by a JSON object with the following syntax:\n\n* The entity id is specified by the object\'s `id` property, whose value is a string containing the\n  entity id.\n\n* The entity type is specified by the object\'s `type` property, whose value is a string containing\n  the entity\'s type name.\n\n* Entity attributes are specified by additional properties, whose names are the `name` of the \n  attribute and whose representation is described in the \"JSON Attribute Representation\" section\n  below. Obviously, `id` and `type` are not allowed to be used as attribute names.\n\nAn example of this syntax in shown below:\n\n```\n{\n  \"id\": \"entityID\",\n  \"type\": \"entityType\",\n  \"attr_1\": <val_1>,\n  \"attr_2\": <val_2>,\n  ...\n  \"attr_N\": <val_N>\n}\n```\n\nThe normalized representation of entities always include `id`, `type` and the properties that\nrepresent attributes. However, simplified or partial representations\n(see the \"Partial Representations\" section below) may leave some of them out.\nThe specification of each operation includes details about what representation is expected as input\nor what representation will be provided (rendered) as output.\n\n## JSON Attribute Representation\n\nAn attribute is represented by a JSON object with the following syntax:\n\n* The attribute value is specified by the `value` property, whose value may be any JSON datatype.\n\n* The attribute NGSI type is specified by the `type` property, whose value is a string containing\n  the NGSI type.\n\n* The attribute metadata is specified by the `metadata` property. Its value is another JSON object\n  which contains a property per metadata element defined (the name of the property is the `name` of\n  the metadata element). Each metadata element, in turn, is represented by a JSON object containing\n  the following properties:\n\n  * `value`: Its value contains the metadata value, which may correspond to any JSON datatype.\n\n  * `type`: Its value contains a string representation of the metadata NGSI type.\n\nAn example of this syntax in shown below:\n\n```\n{\n  \"value\": <...>,\n  \"type\": <...>,\n  \"metadata\": <...>\n}\n```\n\n## Simplified Entity Representation\n\nThere are two representation modes that must be supported by implementations. These representation\nmodes allow to generate simplified representations of entities.\n\n* *keyValues* mode. This mode represents the entity attributes by their values only, leaving out the\n  information about type and metadata.\n  See example below.\n\n```\n{\n  \"id\": \"R12345\",\n  \"type\": \"Room\",\n  \"temperature\": 22\n}\n```\n\n* *values mode*. This mode represents the entity as an array of attribute values.\n  Information about id and type is left out.\n  See example below.\n  The order of the attributes in the array is specified by the `attrs` URI param\n  (e.g. `attrs=branch,colour,engine`). If `attrs` is not used, the order is arbitrary.\n\n```\n[ \'Ford\', \'black\', 78.3 ]\n```\n\n* *unique mode*. This mode is just like *values mode*, except that values are not repeated.\n\n## Partial Representations\n\nSome operations use partial representation of entities:\n\n* `id` and `type` are not allowed in update operations, as they are immutable properties.\n\n* In requests where entity `type` is allowed, it may be omitted. When omitted in entity\n  creation operations, the default string value `Thing` is used for the type.\n\n* In some cases, not all the attributes of the entity are shown, e.g. a query selecting a subset\n  of the entity attributes.\n\n* Attribute/metadata `value` may be omitted in requests, meaning that the attribute/metadata has\n  `null` value. In responses, the value is always present.\n\n* Attribute/metadata `type` may be omitted in requests. When omitted in attribute/metadata creation\n  or in update operations, a default is used for the type depending on the value:\n  * If value is a string, then type `Text` is used\n  * If value is a number, then type `Number` is used.\n  * If value is a boolean, then type `Boolean` is used.\n  * If value is an object or array, then `StructuredValue` is used.\n  * If value is null, then `None` is used.\n\n* Attribute `metadata` may be omitted in requests, meaning that there are no metadata elements\n  associated to the attribute. In responses, this property is set to\n  `{}` if the attribute doesn\'t have any metadata.\n\n\n## Special Attribute Types\n\nGenerally speaking, user-defined attribute types are informative; they are processed by the NGSIv2\nserver in an opaque way. Nonetheless, the types described below are used to convey a special\nmeaning:\n\n* `DateTime`:  identifies dates, in ISO8601 format. These attributes can be used with the query\n  operators greater-than, less-than, greater-or-equal, less-or-equal and range. For instance\n  (only the referred entity attribute is shown):\n\n```\n{\n  \"timestamp\": {\n    \"value\": \"2017-06-17T07:21:24.238Z\",\n    \"type: \"DateTime\"\n  }\n}\n```\n\n* `geo:point`, `geo:line`, `geo:box`, `geo:polygon` and `geo:json`. They have special semantics\n  related with entity location. See \"Geospatial properties of entities\" section.\n\n## Builtin Attributes\n\nThere are entity properties that are not directly modifiable by NGSIv2 clients, but that can be\nrendered by NGSIv2 servers to provide extra information. From a representation point of view, they\nare just like regular attributes, with name, value and type.\n\nBuiltin attributes are not rendered by default. In order to render a specific attribute, add its\nname to the `attrs` parameter in URLs (or payload field in POST /v2/op/query operation) or\nsubscription (`attrs` sub-field within `notification`).\n\nThe list of builtin attributes is as follows:\n\n* `dateCreated` (type: `DateTime`): entity creation date as an ISO 8601 string.\n\n* `dateModified` (type: `DateTime`): entity modification date as an ISO 8601 string.\n\n* `dateExpires` (type: `DateTime`): entity expiration date as an ISO 8601 string. How the server\n  controls entity expiration is an implementation specific aspect.\n\nLike regular attributes, they can be  used in `q` filters and in `orderBy`.\nHowever, they cannot be used in resource URLs.\n\n## Builtin Metadata\n\nSome attribute properties are not directly modifiable by NGSIv2 clients, but they can be\nrendered by NGSIv2 servers to provide extra information. From a representational point of view, they\nare just like regular metadata, with name, value, and type.\n\nBuiltin metadata are not rendered by default. In order to render a specific metadata, add its\nname to the `metadata` URL parameter (or payload field in POST /v2/op/query operation) or\nsubscription (`metadata` sub-field within `notification`).\n\nThe list of builtin metadata is as follows:\n\n* `dateCreated` (type: `DateTime`): attribute creation date as an ISO 8601 string.\n\n* `dateModified` (type: `DateTime`): attribute modification date as an ISO 8601 string.\n\n* `previousValue` (type: any): only in notifications. The value of this metadata is the previous\n  value (to the request triggering the notification) of the associated attribute. The type of this metadata\n  must be the previous type of the associated attribute. If the type/value of `previousValue` is the same\n  type/value as in the associated attribute, then the attribute has not actually changed its value.\n\n* `actionType` (type: `Text`): only in notifications.  It is included if the attribute to which it is attached\n  was included in the request that triggered the notification. Its value depends on the request operation\n  type: `update` for updates, `append` for creation and `delete` for deletion. Its type is always `Text`.\n\nLike regular metadata, they can be  used in `mq` filters. However, they cannot be used in resource URLs.\n\n## Field syntax restrictions\n\nFields used as identifiers in the NGSIv2 API follow special rules regarding allowed syntax.\nThese rules apply to:\n\n* Entity id\n* Entity type\n* Attribute name\n* Attribute type\n* Metadata name\n* Metadata type\n\nThe rules are:\n\n* Allowed characters are the ones in the plain ASCII set, except the following ones:\n  control characters, whitespace, `&`, `?`, `/` and `#`.\n* Maximum field length is 256 characters.\n* Minimum field length is 1 character.\n\nIn addition to the above rules, given NGSIv2 server implementations could add additional syntactical\nrestrictions in those or other fields, e.g., to avoid cross script injection attacks.\n\nIn case a client attempts to use a field that is invalid from a syntax point of view, the client\ngets a \"Bad Request\" error response, explaining the cause.\n\n## Attribute names restrictions\n\nThe following strings must not be used as attribute names:\n\n* `id`, as it would conflict with the field used to represent entity id.\n\n* `type`, as it would conflict with the field used to represent entity type.\n\n* `geo:distance`, as it would conflict with the string used in `orderBy` for proximity to\n  center point.\n\n* Builtin attribute names (see specific section on \"Builtin Attributes\")\n\n* `*`, as it has a special meaning as \"all the custom/user attributes\" (see section on\n  \"Filtering out attributes and metadata\").\n\n## Metadata names restrictions\n\nThe following strings must not be used as metadata names:\n\n* Builtin metadata names (see specific section on \"Builtin Metadata\")\n\n* `*`, as it has a special meaning as \"all the custom/user metadata\" (see section on\n  \"Filtering out attributes and metadata\").\n\n## Ordering Results\n\nOperations that retrieve lists of entities permit the `orderBy` URI parameter to specify the\nattributes or properties to be be used as criteria when ordering results.\nThe value of `orderBy` can be:\n\n* The keyword `geo:distance` to order results by distance to a reference geometry when a \"near\"\n  (`georel=near`) spatial relationship is used. \n\n* A comma-separated list of attributes (including builtin attributes), `id` (for entity\n  ID), and `type` (for entity type), e.g. `temperature,!humidity`. Results are ordered by the first\n  field. On ties, the results are ordered by the second field and so on. A \"!\" before\n  the field name means that the order is reversed.\n\n## Error Responses\n\nIf present, the error payload is a JSON object including the following fields:\n\n+ `error` (required, string): a textual description of the error.\n+ `description` (optional, string): additional information about the error.\n\nAll NGSIv2 server implementations must use the following HTTP status codes and `error` texts\ndescribed in this section. However, the particular text used for `description` field is\nan implementation specific aspect.\n\nNGSIv2 `error` reporting is as follows:\n\n+ If the incoming JSON payload cannot be parsed then `ParseError` (`400`) is returned.\n+ Errors which are only caused by request itself (i.e. they do not depend on the NGSIv2 server status),\n  either in the URL parameters or in the payload, results in `BadRequest`(`400`).\n  + Exception: incoming JSON payload errors, which have another `error` message (see previous bullet).\n+ Attemp to exceed spatial index limit results in `NoResourceAvailable` (`413`). See \"Geospatial properties of entities\"\n  section for details.\n+ Ambiguity due to the request may refer to several resources, e.g. attempt to update an entity providing only its ID\n  and several entities with that ID exist, results in `TooManyResults` (`409`).\n+ If the resource identified by the request is not found then `NotFound` (`404`) is returned.\n+ Errors due to the request plus state combination but not exclusively from the request\n  (e.g. POST with `options=append` on an existing attribute) results in `Unprocessable` (`422`).\n  + Exception: the request plus state conditions that lead to 404, 409 or 413 errors, as described in previous bullets.\n+ HTTP layer errors use the following:\n  + HTTP 405 Method Not Allowed corresponds to `MethodNotAlowed` (`405`)\n  + HTTP 411 Length Required corresponds to `ContentLengthRequired` (`411`)\n  + HTTP 413 Request Entity Too Large corresponds to `RequestEntityTooLarge` (`413`)\n  + HTTP 415 Unsupported Media Type corresponds to `UnsupportedMediaType` (`415`)\n\n## Geospatial properties of entities\n\nThe geospatial properties of a context entity can be represented by means of regular\ncontext attributes.\nThe provision of geospatial properties enables the resolution of geographical queries.\n\nTwo different syntaxes must be supported by compliant implementations: \n\n* *Simple Location Format*. It is meant as a very lightweight format for developers and users to\n  quickly and easily add to their existing entities.\n\n* *GeoJSON*.  [GeoJSON](https://tools.ietf.org/html/draft-butler-geojson-06) is a geospatial data\n  interchange format based on the JavaScript Object Notation (JSON).\n  GeoJSON provides greater flexibility allowing the representation of point altitudes or even more\n  complex geospatial shapes, for instance\n  [multi geometries](http://www.macwright.org/2015/03/23/geojson-second-bite.html#multi-geometries).\n\nClient applications are responsible for defining which entity attributes convey geospatial\nproperties (by providing an appropriate NGSI attribute type). Typically this is an entity attribute\nnamed `location`, but nothing prevents use cases where an entity contains more than one geospatial\nattribute. For instance, locations specified at different granularity levels or provided by\ndifferent location methods with different accuracy. \nNonetheless, it is noteworthy that spatial properties\nneed special indexes which can be under resource constraints imposed by backend databases.\nThus, implementations may raise errors when spatial index limits are exceeded.\nThe recommended HTTP status code for those situations is ``413``, *Request entity too large*, and\nthe reported error on the response payload must be ``NoResourcesAvailable``.\n\n### Simple Location Format\n\nSimple Location Format supports basic geometries ( *point*, *line*, *box*, *polygon* ) and covers\nthe typical use cases when encoding geographical locations. It has been inspired by\n[GeoRSS Simple](http://www.georss.org/simple.html).\n\nIt is noteworthy that the Simple Location Format is not intended to represent complex positions on\nEarth surface.\nFor instance, applications that require to capture altitude coordinates will have to use GeoJSON as\nrepresentation format for the geospatial properties of their entities. \n\nA context attribute representing a location encoded with the Simple Location Format\nmust conform to the following syntax:\n\n* The attribute type must be one of the following values: (`geo:point`, `geo:line`, `geo:box` or \n  `geo:polygon`).\n* The attribute value must be a list of coordinates. By default, coordinates are defined\n  using the [WGS84 Lat Long](https://en.wikipedia.org/wiki/World_Geodetic_System#WGS84),\n  [EPSG::4326](http://www.opengis.net/def/crs/EPSG/0/4326) coordinate reference system (CRS),\n  with latitude and longitude units of decimal degrees. Such coordinate list allow to encode\n  the geometry specified by the `type` attribute and are encoded according to the specific\n  rules defined below:\n\n  * Type `geo:point`:   the attribute value must contain a string containing a\n    valid latitude-longitude pair, separated by comma.\n  * Type `geo:line`:    the attribute value must contain a string array of\n    valid latitude-longitude pairs. There must be at least two pairs.\n  * Type `geo:polygon`: the attribute value must contain a string array\n    of valid latitude-longitude pairs.\n    There must be at least four pairs, with the last being identical to the first\n    (so a polygon has a minimum of three actual points).\n    Coordinate pairs should be properly ordered so that the line segments\n    that compose the polygon remain on the outer edge of the defined area.\n    For instance, the following path, ```[0,0], [0,2], [2,0], [2, 2]```, is an example of an invalid\n    polygon definition. \n    Implementations should raise an error when none of the former conditions are met by input data. \n  * Type `geo:box`:     A bounding box is a rectangular region, often used to define the extents of\n    a map or a rough area of interest. A box is represented by a two-length string array of\n    latitude-longitude pairs.\n    The first pair is the lower corner, the second is the upper corner.\n\nNote: Circle geometries are not supported, as the [literature](https://github.com/geojson/geojson-spec/wiki/Proposal---Circles-and-Ellipses-Geoms#discussion-notes)\ndescribes different shortcomings for implementations. \n\nThe examples below illustrate the referred syntax:\n\n```\n{\n  \"location\": {\n    \"value\": \"41.3763726, 2.186447514\",\n    \"type\": \"geo:point\"\n  }\n}\n```\n\n```\n{\n  \"location\": {\n    \"value\": [\n      \"40.63913831188419, -8.653321266174316\",\n      \"40.63881265804603, -8.653149604797363\"\n    ],\n    \"type\": \"geo:box\"\n  }\n}\n```\n\n### GeoJSON\n\nA context attribute representing a location encoded using GeoJSON must conform to the following\nsyntax:\n\n* The NGSI type of the attribute must be `geo:json`.\n* The attribute value must be a valid GeoJSON object. It is noteworthy that longitude comes before\n  latitude in GeoJSON coordinates.\n\nThe example below illustrates the usage of GeoJSON.\nMore GeoJSON examples can be found in [GeoJSON IETF Spec](https://tools.ietf.org/html/draft-butler-geojson-06#page-14).\nAdditionally, the following\n[GeoJSON Tutorial](http://www.macwright.org/2015/03/23/geojson-second-bite.html)\nmight be useful in understanding the format. \n\n```\n{\n  \"location\": {\n    \"value\": {\n      \"type\": \"Point\",\n      \"coordinates\": [2.186447514, 41.3763726]\n    },\n    \"type\": \"geo:json\"\n  }\n}\n```\n\n## Simple Query Language\n\nThe Simple Query Language provides a simplified syntax to retrieve entities which match a set of\nconditions.\nA query is composed by a list of statements separated by the \';\' character.\nEach statement expresses a matching condition.\nThe query returns all the entities that match all the matching conditions (AND logical operator). \n\nThere are two kinds of statements: *unary statements* and *binary statements*.\n\nBinary statements are composed by an attribute path (e.g. `temperature` or `brand.name`), an operator\nand a value (whose format depends on the operator), e.g.:\n\n```\ntemperature==50\ntemperature<=20\n```\n\nThe syntax of an attribute path consists of a list of tokens separated by the `.` character. This list of tokens\naddresses a JSON property name, in accordance with the following rules:\n\n* The first token is the name of an NGSI attribute (*target NGSI attribute*) of an entity.\n* If filtering by attribute value (i.e. the expression is used in a `q` query), the rest of tokens (if present)\n  represent the path to a sub-property of the *target NGSI attribute value* (which should be a JSON object).\n  Such sub-property is defined as the *target property*.\n* If filtering by metadata (i.e. the expression is used in a `mq` query), the second token represents a metadata\n  name associated to the target NGSI attribute, *target metadata*, and the rest of tokens\n  (if present) represent the path to a sub-property of the *target metadata value* (which should be a\n  JSON object). Such sub-property is defined as the *target property*.\n\nThe *target property value* is defined as the value of the JSON property addressed by the list of tokens described\nabove i.e. the value of the *target property*.\n\nIn case only one token is provided (two in case of filtering by metadata), then the *target property* will\nbe the *target NGSI attribute* itself (or the *target metadata* in case of filtering by metadata) and the\n*target property value* will be the *target NGSI attribute* value (or the *target metadata* value in case\nof filtering by metadata). The value of the *target NGSI attribute* (or the *target metadata*\nin case of filtering by metadata) should not be a JSON object in this case.\n\nIn case some of the tokens include `.`, you can use single quote (`\'`) as separator. For example, the following\nattribute path `\'a.b\'.w.\'x.y\'` is composed by three tokens: the first token is `a.b`, the second token is `w` and\nthe third token is `x.y`.\n\nThe list of operators (and the format of the values they use) is as follows:\n\n+ **Equal**: `==`. This operator accepts the following types of right-hand side:\n    + Single element, e.g. `temperature==40`. For an entity to match, it must contain the *target\n      property* (temperature) and the *target property value* must be the query value (40)\n      (or include the value, in case the *target property value* is an array).\n    + A list of comma-separated values, e.g. `color==black,red`. For an entity to match, it must\n      contain the *target property* and the *target property value* must be **any** of the values\n      in the list (OR clause) (or include **any** of the values in the list in case the *target\n      property value* is an array).\n      E.g. entities with an attribute named `color`, whose value is `black` are a match, while\n      entities with an attribute named `color` but whose value is `white` do not match.\n    + A range, specified as a minimum and a maximum, separated by `..`, e.g. `temperature==10..20`.\n      For an entity to match, it must contain the *target property* (temperature),\n      and the *target property value* must be between the upper and lower limits\n      of the range (both included). Ranges can only be used with *target properties* that represent\n      dates (in ISO8601 format), numbers or strings.\n+ **Unequal**: `!=`. This operator accepts the following types of right-hand side:\n    + Single element, e.g. `temperature!=41`. For an entity to match, it must contain the *target\n      property* (temperature) and the *target property value* must **not** be the query value (41).\n    + A list of comma-separated values, e.g. `color!=black,red`. For an entity to match, it must\n      contain the *target property* and the *target property value* must **not** be any of the values\n      in the list (AND clause) (or not include **any** of the values in the list in case the *target\n      property value* is an array).\n      Eg. entities whose attribute `color` is set to `black` will not match, while entities whose\n      attribute `color` is set to `white` will match.\n    + A range, specified as a minimum and maximum separated by `..`, e.g. `temperature!=10..20`.\n      For an entity to match, it must contain the *target property* (temperature) and the\n      *target property value* must **not** be between the upper and lower limits\n      (both included). Ranges can only be used with elements *target properties* that represent dates\n      (in ISO8601 format), numbers or strings.\n+ **Greater than**: `>`. The right-hand side must be a single element, e.g. `temperature>42`.\n    For an entity to match, it must contain the *target property* (temperature)\n    and the *target property value* must be strictly greater than the query value (42).\n    This operation is only valid for *target properties* of type date, number or string (used with\n    *target properties* of other types may lead to unpredictable results).\n+ **Less than**: `<`. The right-hand side must be a single element, e.g. `temperature<43`.\n    For an entity to match, it must contain the *target property* (temperature)\n    and the *target property value* must be strictly less than the value (43).\n    This operation is only valid for *target properties* of type date, number or string (used with\n    *target properties* of other types may lead to unpredictable results).\n+ **Greater or equal than**: `>=`. The right-hand side must be a single element, e.g. `temperature>=44`.\n    For an entity to match, it must contain the *target property* (temperature)\n    and the *target property value* must be greater than or equal to that value (44).\n    This operation is only valid for *target properties* of type date, number or string (used with\n    *target properties* of other types may lead to unpredictable results).\n+ **Less or equal than**: `<=`. The right-hand side must be a single element, e.g. `temperature<=45`.\n    For an entity to match, it must contain the *target property* (temperature)\n    and the *target property value* must be less than or equal to that value (45).\n    This operation is only valid for *target properties* of type date, number or string (used with\n    *target properties* of other types may lead to unpredictable results).\n+ **Match pattern**: `~=`. The value matches a given pattern, expressed as a regular expression, e.g.\n    `color~=ow`. For an entity to match, it must contain the *target property* (color)\n    and the *target property value* must match the string in the right-hand side,\n    \'ow\' in this example (`brown` and `yellow` would match, `black` and `white` would not).\n    This operation is only valid for *target properties* of type string.\n\nThe symbol `:` can be used instead of `==`.\n\nIn case of equal or unequal, if the string to match includes a `,`, you can use single quote\n(`\'`) to disable the special meaning of the comma,  e.g: `color==\'light,green\',\'deep,blue\'`.\nThe first example would match a color with the exact value \'light,green\' OR \'deep,blue\'. The\nsimple quote syntax can be also used to force string interpretation in filters, e.g.\n`q=title==\'20\'` will match string \"20\" but not number 20.\n\nUnary negatory statements use the unary operator `!`, while affirmative unary statements use no\noperator at all.\nThe unary statements are used to check for the existence of the *target property*.\nE.g. `temperature` matches entities that have an attribute called \'temperature\' (no matter its\nvalue), while `!temperature` matches entities that do not have an attribute called \'temperature\'.\n \n## Geographical Queries\n\nGeographical queries are specified using the following parameters:\n\n``georel`` is intended to specify a spatial relationship (a predicate)\nbetween matching entities and a reference shape (`geometry`).\nIt is composed of a token list separated by \';\'.\nThe first token is the relationship name, the rest of the tokens (if any) are modifiers which\nprovide more information about the relationship. The following values are recognized:\n\n+ `georel=near`. The ``near`` relationship means that matching entities must be located at a certain\n  threshold distance to the reference geometry. It supports the following modifiers:\n  + `maxDistance`.  Expresses, in meters, the maximum distance at which matching entities must be\n    located.\n  + `minDistance`.  Expresses, in meters, the minimum distance at which matching entities must be\n    located.\n+ `georel=coveredBy`. Denotes that matching entities are those that exist entirely within the\n  reference geometry.\n  When resolving a query of this type, the border of the shape must be considered to be part of the\n  shape. \n+ `georel=intersects`. Denotes that matching entities are those intersecting with the reference\n  geometry.\n+ `georel=equals`. The geometry associated to the position of matching entities and the reference\n  geometry must be exactly the same.\n+ `georel=disjoint`. Denotes that matching entities are those **not** intersecting with the\n  reference geometry. \n\n`geometry` allows to define the reference shape to be used when resolving the query.\n The following geometries (see Simple Location Format) must be supported:\n\n+ `geometry=point`, defines a point on the Earth surface.\n+ `geometry=line`, defines a polygonal line.\n+ `geometry=polygon`, defines a polygon.\n+ `geometry=box`, defines a bounding box.\n\n**coords** must be a string containing a semicolon-separated list of pairs of geographical\ncoordinates in accordance with the geometry specified and the rules mandated by the Simple Location\nFormat:\n\n* `geometry=point`.   `coords` contains a pair of WGS-84 geo-coordinates.\n* `geometry=line`.    `coords` contains a list of pairs of WGS-84 geo-coordinates.\n* `geometry=polygon`. `coords` is composed by at least four pairs of WGS-84 geo-coordinates.\n* `geometry=box`.     `coords` is composed by two pairs of WGS-84 geo-coordinates.\n\nExamples:\n\n`georel=near;maxDistance:1000&geometry=point&coords=-40.4,-3.5`.\nMatching entities must be located (at most) 1000 meters from the reference point.\n\n`georel=near;minDistance:5000&geometry=point&coords=-40.4,-3.5`.\nMatching entities must be (at least) 5000 meters from the reference point. \n\n`georel=coveredBy&geometry=polygon&coords=25.774,-80.190;18.466,-66.118;32.321,-64.757;25.774,-80.190`\nMatching entities are those located within the referred polygon.\n\n### Query Resolution\n\nIf an implementation is not able to resolve a geographical query, the HTTP Status code of the\nresponse must be ```422```, *Unprocessable Entity*. The error name, present in the error payload,\nmust be ``NotSupportedQuery``. \n\nWhen resolving geographical queries, through the Simple Query Language,\nthe API implementation is responsible for determining which entity attribute\ncontains the geographical location to be used for matching purposes.\nTo this aim, the following rules must be followed:\n\n* If an entity has no attribute corresponding to a location (encoded as GeoJSON or the\n  Simple Location Format), then such an entity has not declared any geospatial property and will not\n  match any geographical query.\n\n* If an entity only exposes one attribute corresponding to a location, then such an attribute will\n  be used when resolving geographical queries.\n\n* If an entity exposes more than one location, then the attribute containing a metadata property\n  named ``defaultLocation``, with boolean value ``true`` will be taken as the reference location\n  used for resolving geographical queries. \n\n* If there is more than one attribute exposing location but none of them is labeled as default\nlocation, then the query will be declared ambiguous and an HTTP error response with a ``409`` code\nmust be sent.\n\n* If there is more than one attribute exposing location labeled as *default location*, then the\n  query is declared ambiguous and an HTTP error response with a ``409`` code must be sent. \n\n## Filtering out attributes and metadata\n\nThe `attrs` URL parameter (or field in POST /v2/op/query) can be used in retrieve operations\nto specify the list of attributes that must be included in the response. In a similar way, the\n`metadata` URL parameter (or field in POST /v2/op/query) can be used to specify the list of metadata\nthat must be included in the response.\n\nBy default, if `attrs` is omitted (or `metadata` is omitted) then all the attributes (all the\nmetadata) are included, except builtin attributes (metadata). In order to include\nbuiltin attributes (metadata) they have to be explicitly included in `attrs` (`metadata`).\n\nE.g. to include only attributes A and B:\n\n`attrs=A,B`\n\nNote that including *only* builtin attributes (metadata) will avoid any user-defined\nattribute (metadata). If you want to include builtin attributes (metadata) *and* user-defined\nattributes (metadata) at the same time then\n\n* The user-defined attributes (metadata) have to be explictly included, e.g. to include the user-defined\n  attributes A and B along with the builtin attribute `dateModified`, use: `attrs=dateModified,A,B`.\n* The special value `*` can be used as an alias meaning \"all user-defined attributes (metadata)\", e.g.,\n  to include all the user-defined attributes along with the builtin attribute `dateModified`\n  use: `attrs=dateModified,*`.\n\nNote that the `attrs` and `metadata` fields can be used also in subscriptions (as sub-fields of `notification`)\nwith the same meaning to specify which attributes (metadata) to include in notifications associated\nto that subscription.\n\n## Notification Messages\n\nNotifications include two fields:\n\n* `subscriptionId` represents the concerned subscription that originates the notification\n* `data` is an array with the notification data itself which includes the entity and all concerned\n  attributes. Each element in the array corresponds to a different entity. By default, the entities\n  are represented in `normalized` mode. However, using the `attrsFormat` modifier, a simplified\n  representation mode can be requested.\n\nIf `attrsFormat` is `normalized` (or if `attrsFormat` is omitted) then default entity representation\nis used:\n\n```\n{\n  \"subscriptionId\": \"12345\",\n  \"data\": [\n    {\n      \"id\": \"Room1\",\n      \"type\": \"Room\",\n      \"temperature\": {\n        \"value\": 23,\n        \"type\": \"Number\",\n        \"metadata\": {}\n      },\n      \"humidity\": {\n        \"value\": 70,\n        \"type\": \"percentage\",\n        \"metadata\": {}\n      }\n    },\n    {\n      \"id\": \"Room2\",\n      \"type\": \"Room\",\n      \"temperature\": {\n        \"value\": 24,\n        \"type\": \"Number\",\n        \"metadata\": {}\n      }\n    }\n  ]\n}\n```\n\nIf `attrsFormat` is `keyValues` then keyValues partial entity representation mode is used:\n\n```\n{\n  \"subscriptionId\": \"12345\",\n  \"data\": [\n    {\n      \"id\": \"Room1\",\n      \"type\": \"Room\",\n      \"temperature\": 23,\n      \"humidity\": 70\n    },\n    {\n      \"id\": \"Room2\",\n      \"type\": \"Room\",\n      \"temperature\": 24\n    }\n  ]\n}\n```\n\n\nIf `attrsFormat` is `values` then values partial entity representation mode is used:\n\n```\n{\n  \"subscriptionId\": \"12345\",\n  \"data\": [ [23, 70], [24] ]\n}\n```\n\nNotifications must include the `Ngsiv2-AttrsFormat` HTTP header with the value of the format of the\nassociated subscription, so that notification receivers are aware of the format without\nneeding to process the notification payload.\n\n## Custom Notifications\n\nNGSIv2 clients can customize HTTP notification messages using a simple template mechanism. The\n`notification.httpCustom` property of a subscription allows to specify the following fields\nto be templatized:\n\n* `url`\n* `headers` (both header name and value can be templatized)\n* `qs` (both parameter name and value can be templatized)\n* `payload`\n\nThe fifth field `method`, lets the NGSIv2 clients select the HTTP method to be used for delivering\nthe notification, but note that only valid HTTP verbs can be used: GET, PUT, POST, DELETE, PATCH,\nHEAD, OPTIONS, TRACE, and CONNECT.\n\n\nMacro substitution for templates is based on the syntax `${..}`. In particular:\n\n* `${id}` is replaced by the `id` of the entity\n* `${type}` is replaced by the `type` of the entity\n* Any other `${token}` is replaced by the value of the attribute whose name is `token` or with\n  an empty string if the attribute is not included in the notification. If the value is a number,\n  a bool or null then its string representation is used. If the value is a JSON array or object\n  then its JSON representation as string is used.\n\nExample:\n\nLet\'s consider the following `notification.httpCustom` object in a given subscription.\n\n```\n\"httpCustom\": {\n  \"url\": \"http://foo.com/entity/${id}\",\n  \"headers\": {\n    \"Content-Type\": \"text/plain\"\n  },\n  \"method\": \"PUT\",\n  \"qs\": {\n    \"type\": \"${type}\"\n  },\n  \"payload\": \"The temperature is ${temperature} degrees\"\n}\n```\n\nNow let\'s assume that a notification associated to this subscription is triggered, and that the\nnotification data is for an entity with id \"DC_S1-D41\" and type \"Room\", and including an attribute\nnamed \"temperature\" with the value 23.4.\nThe resulting notification after applying the template would be:\n\n```\nPUT http://foo.com/entity/DC_S1-D41?type=Room\nContent-Type: text/plain\nContent-Length: 31\n\nThe temperature is 23.4 degrees\n```\n\nSome considerations to take into account:\n\n* It is the NGSIv2 client\'s responsability to ensure that after substitution, the notification is a\n  correct HTTP message (e.g. if the Content-Type header is application/xml, then the payload must\n  correspond to a well-formed XML document). Specifically, if the resulting URL after applying the\n  template is malformed, then no notification is sent.\n* In case the data to notify contains more than one entity, a separate notification (HTTP message)\n  is sent for each of the entities (contrary to default behaviour, which is to send all entities in\n  the same HTTP message).\n\nNote that if a custom payload is used for the notification (the field `payload` is given in the\ncorresponding subscription), then a value of `custom` is used for the `Ngsiv2-AttrsFormat` header\nin the notification.\n\n## Group API Entry Point\n\n### Retrieve API Resources [GET /v2]\n\nThis resource does not have any attributes. Instead it offers the initial\nAPI affordances in the form of the links in the JSON body.\n\nIt is recommended to follow the “url” link values,\n[Link](https://tools.ietf.org/html/rfc5988) or Location headers where\napplicable to retrieve resources. Instead of constructing your own URLs,\nto keep your client decoupled from implementation details.\n\n\n+ Response 200 (application/json)\n\n    + Attributes (object)\n        + entities_url: /v2/entities (required, string) - URL which points to the entities resource\n        + types_url: /v2/types (required, string) - URL which points to the types resource\n        + subscriptions_url: /v2/subscriptions (required, string) - URL which points to the\n          subscriptions resource\n        + registrations_url: /v2/registrations (required, string) - URL which points to the\n          registrations resource\n\n# Group Entities\n\n### List Entities [GET /v2/entities{?limit,offset,options,type,id,idPattern,typePattern,q,mq,georel,geometry,coords,attrs,metadata,orderBy}]\n\nRetrieves a list of entities that match different criteria by id, type, pattern matching (either id or type)\nand/or those which match a query or geographical query (see [Simple Query Language](#simple_query_language) and \n[Geographical Queries](#geographical_queries)). A given entity has to match all the criteria to be retrieved\n(i.e., the criteria is combined in a logical AND way). Note that pattern matching query parameters are incompatible\n(i.e. mutually exclusive) with their corresponding exact matching parameters, i.e. `idPattern` with `id` and\n`typePattern` with `type`.\n\nThe response payload is an array containing one object per matching entity. Each entity follows\nthe JSON entity representation format (described in \"JSON Entity Representation\" section).\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + id: Boe_Idearium (optional, string) - A comma-separated list of elements.\n      Retrieve entities whose ID matches one of the elements in the list.\n      Incompatible with `idPattern`.\n    \n    + type: Room (optional, string) -  comma-separated list of elements.\n      Retrieve entities whose type matches one of the elements in the list.\n      Incompatible with `typePattern`.\n\n    + idPattern: Bode_.* (optional, string) - A correctly formated regular expression.\n      Retrieve entities whose ID matches the regular expression. Incompatible with `id`.\n\n    + typePattern: Room_.* (optional, string) - A correctly formated regular expression.\n      Retrieve entities whose type matches the regular expression. Incompatible with `type`.\n    \n    + q: temperature>40 (optional, string) - A query expression, composed of a list of statements\n      separated by `;`, i.e., q=statement1;statement2;statement3.\n      See [Simple Query Language specification](#simple_query_language). \n\n    + mq: temperature.accuracy<0.9 (optional, string) - A query expression for attribute metadata,\n      composed of a list of statements separated by `;`, i.e., mq=statement1;statement2;statement3.\n      See [Simple Query Language specification](#simple_query_language).\n    \n    + georel: near (optional, string) - Spatial relationship between matching entities and a\n      reference shape. See [Geographical Queries](#geographical_queries).\n\n    + geometry: point (optional, string) - Geografical area to which the query is restricted.\n      See [Geographical Queries](#geographical_queries).\n    \n    + coords: 41.390205,2.154007;48.8566,2.3522 (optional, string) - List of latitude-longitude\n      pairs of coordinates separated by \';\'. See [Geographical Queries](#geographical_queries).\n    \n    + limit: 20 (optional, number) - Limits the number of entities to be retrieved\n    \n    + offset: 20 (optional, number) - Establishes the offset from where entities are retrieved\n    \n    + attrs: seatNumber (optional, string) - Comma-separated list of attribute names whose data\n      are to be included in the response.\n      The attributes are retrieved in the order specified by this parameter. If this parameter is\n      not included, the attributes are retrieved in arbitrary order.\n      See \"Filtering out attributes and metadata\" section for more detail.\n\n    + metadata: accuracy (optional, string) - A list of metadata names to include in the response.\n      See \"Filtering out attributes and metadata\" section for more detail.\n\n    + orderBy: temperature,!speed (optional, string) - Criteria for ordering results.\n      See \"Ordering Results\" section for details.\n    \n    + options (optional, string) - Options dictionary\n      + Members\n          + count - when used, the total number of entities is returned in the response as an \n            HTTP header named `Fiware-Total-Count`.\n          + keyValues - when used, the response payload uses the `keyValues` simplified entity\n            representation. See \"Simplified Entity Representation\" section for details.\n          + values - when used, the response payload uses the `values` simplified entity\n            representation. See \"Simplified Entity Representation\" section for details.\n          + unique - when used, the response payload uses the `values` simplified entity\n            representation.\n            Recurring values are left out.\n            See \"Simplified Entity Representation\" section for details.\n\n+ Response 200 (application/json)\n\n        [\n         {\n           \"type\": \"Room\",\n           \"id\": \"DC_S1-D41\",\n           \"temperature\": {\n             \"value\": 35.6,\n             \"type\": \"Number\",\n             \"metadata\": {}\n           }\n         },\n         {\n           \"type\": \"Room\",\n           \"id\": \"Boe-Idearium\",\n           \"temperature\": {\n             \"value\": 22.5,\n             \"type\": \"Number\",\n             \"metadata\": {}\n           }\n         },\n         {\n           \"type\": \"Car\",\n           \"id\": \"P-9873-K\",\n           \"speed\": {\n             \"value\": 100,\n             \"type\": \"number\",\n             \"metadata\": {\n               \"accuracy\": {\n                 \"value\": 2,\n                 \"type\": \"Number\"\n               },\n               \"timestamp\": {\n                 \"value\": \"2015-06-04T07:20:27.378Z\",\n                 \"type\": \"DateTime\"\n               }\n             }\n           }\n         }\n        ]\n\n### Create Entity [POST /v2/entities{?options}]\n\nThe payload is an object representing the entity to be created. The object follows\nthe JSON entity representation format (described in a \"JSON Entity Representation\" section).\n\nResponse:\n\n* Successful operation uses 201 Created (if upsert option is not used) or 204 No Content (if\n  upsert option is used). Response includes a `Location` header with the URL of the\n  created entity.\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Request (application/json)\n\n        {\n          \"type\": \"Room\",\n          \"id\": \"Bcn-Welt\",\n          \"temperature\": {\n            \"value\": 21.7\n          },\n          \"humidity\": {\n            \"value\": 60\n          },\n          \"location\": {\n            \"value\": \"41.3763726, 2.1864475\",\n            \"type\": \"geo:point\",\n            \"metadata\": {\n              \"crs\": {\n                \"value\": \"WGS84\"\n              }\n            }\n          }\n        }\n\n+ Parameters\n    + options (optional, string) - Options dictionary\n      + Members\n          + keyValues - when used, the request payload uses the `keyValues` simplified entity\n            representation. See \"Simplified Entity Representation\" section for details.\n          + upsert - when used, entity is updated if already exits. If upsert is not used and\n            the entity already exist a `422 Unprocessable Entity` error is returned.\n\n+ Response 201\n\n    + Headers\n\n            Location: /v2/entities/Bcn-Welt?type=Room\n\n+ Response 204\n\n    + Headers\n\n            Location: /v2/entities/Bcn-Welt?type=Room\n\n\n## Entity by ID [/v2/entities/{entityId}{?type,attrs,options}]\n\n### Retrieve Entity [GET /v2/entities/{entityId}{?type,attrs,metadata,options}]\n\nThe response is an object representing the entity identified by the ID. The object follows\nthe JSON entity representation format (described in \"JSON Entity Representation\" section).\n\nThis operation must return one entity element only, but there may be more than one entity with the\nsame ID (e.g. entities with same ID but different types).\nIn such case, an error message is returned, with the HTTP status code set to 409 Conflict. \n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for more details.\n\n+ Parameters\n    + entityId (required, string) - Id of the entity to be retrieved\n    + type (optional, string) - Entity type, to avoid ambiguity in case there are several\n      entities with the same entity id.\n    + attrs: temperature,humidity (optional, string) - Comma-separated list of attribute names whose\n      data must be included in the response. The attributes are retrieved in the order specified by\n      this parameter. See \"Filtering out attributes and metadata\" section for more detail.\n      If this parameter is not included, the attributes are retrieved in arbitrary order, and all\n      the attributes of the entity are included in the response.\n    + metadata: accuracy (optional, string) - A list of metadata names to include in the response.\n      See \"Filtering out attributes and metadata\" section for more detail.\n    + options (optional, string) - Options dictionary\n      + Members\n          + keyValues - when used, the response payload uses the `keyValues` simplified entity\n            representation. See \"Simplified Entity Representation\" section for details.\n          + values - when used, the response payload uses the `values` simplified entity\n            representation. See \"Simplified Entity Representation\" section for details.\n          + unique - when used, the response payload uses the `values` simplified entity\n            representation. Recurring values are left out.\n            See \"Simplified Entity Representation\" section for details.\n\n+ Response 200 (application/json)\n\n        {\n          \"type\": \"Room\",\n          \"id\": \"Bcn_Welt\",\n          \"temperature\": {\n            \"value\": 21.7,\n            \"type\": \"Number\"\n          },\n          \"humidity\": {\n            \"value\": 60,\n            \"type\": \"Number\"\n          },\n          \"location\": {\n            \"value\": \"41.3763726, 2.1864475\",\n            \"type\": \"geo:point\",\n            \"metadata\": {\n              \"crs\": {\n                \"value\": \"WGS84\",\n                \"type\": \"Text\"\n              }\n            }\n          }\n        }\n\n### Retrieve Entity Attributes [GET /v2/entities/{entityId}/attrs{?type,attrs,metadata,options}]\n\nThis request is similar to retreiving the whole entity, however this one omits the `id` and `type`\nfields.\n\nJust like the general request of getting an entire entity, this operation must return only one\nentity element. If more than one entity with the same ID is found (e.g. entities with\nsame ID but different type), an error message is returned, with the HTTP status code set to\n409 Conflict.\n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + entityId (required, string) - Id of the entity to be retrieved\n    + type (optional, string) - Entity type, to avoid ambiguity in case there are several\n      entities with the same entity id.\n    + attrs: temperature,humidity (optional, string) - Comma-separated list of attribute names whose\n      data are to be included in the response. The attributes are retrieved in the order specified\n      by this parameter.\n      If this parameter is not included, the attributes are retrieved in arbitrary order, and all\n      the attributes of the entity are included in the response.\n      See \"Filtering out attributes and metadata\" section for more detail.\n    + metadata: accuracy (optional, string) - A list of metadata names to include in the response.\n      See \"Filtering out attributes and metadata\" section for more detail.\n    + options (optional, string) - Options dictionary\n      + Members\n          + keyValues - when used, the response payload uses the `keyValues` simplified entity\n            representation. See \"Simplified Entity Representation\" section for details.\n          + values - when used, the response payload uses the `values` simplified entity\n            representation. See \"Simplified Entity Representation\" section for details.\n          + unique - when used, the response payload uses the `values` simplified entity\n            representation. Recurring values are left out.\n            See \"Simplified Entity Representation\" section for details.\n\n+ Response 200 (application/json)\n\n        {\n          \"temperature\": {\n            \"value\": 21.7,\n            \"type\": \"Number\"\n          },\n          \"humidity\": {\n            \"value\": 60,\n            \"type\": \"Number\"\n          },\n          \"location\": {\n            \"value\": \"41.3763726, 2.1864475\",\n            \"type\": \"geo:point\",\n            \"metadata\": {\n              \"crs\": {\n                \"value\": \"WGS84\",\n                \"type\": \"Text\"\n              }\n            }\n          }\n        }\n\n### Update or Append Entity Attributes [POST /v2/entities/{entityId}/attrs{?type,options}]\n\nThe request payload is an object representing the attributes to append or update. The object follows\nthe JSON entity representation format (described in \"JSON Entity Representation\" section), except\nthat `id` and `type` are not allowed.\n\nThe entity attributes are updated with the ones in the payload, depending on\nwhether the `append` operation option is used or not.\n\n* If `append` is not used: the entity attributes are updated (if they previously exist) or appended\n  (if they don\'t previously exist) with the ones in the payload.\n* If `append` is used (i.e. strict append semantics): all the attributes in the payload not\n  previously existing in the entity are appended. In addition to that, in case some of the\n  attributes in the payload already exist in the entity, an error is returned.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + entityId (required, string) - Entity id to be updated\n    + type (optional, string) - Entity type, to avoid ambiguity in case there are several\n    entities with the same entity id.\n    + options (optional, string) - Operations options\n        + Members\n            + append - Force an append operation\n            + keyValues - when used, the request payload uses the `keyValues` simplified entity\n              representation. See \"Simplified Entity Representation\" section for details.\n\n+ Request (application/json)\n\n    + Body\n\n            {\n              \"ambientNoise\": {\n                \"value\": 31.5\n              }\n            }\n\n+ Response 204\n\n### Update Existing Entity Attributes [PATCH /v2/entities/{entityId}/attrs{?type,options}]\n\nThe request payload is an object representing the attributes to update. The object follows\nthe JSON entity representation format (described in \"JSON Entity Representation\" section), except\nthat `id` and `type` are not allowed.\n\nThe entity attributes are updated with the ones in the payload. In addition to that, if one or more\nattributes in the payload doesn\'t exist in the entity, an error is returned.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters \n    + entityId (required, string) - Id of the entity to be updated\n    + type (optional, string) - Entity type, to avoid ambiguity in case there are several\n      entities with the same entity id.\n    + options (optional, string) - Operations options\n        + Members\n            + keyValues - when used, the request payload uses the `keyValues` simplified entity\n              representation. See \"Simplified Entity Representation\" section for details.\n\n+ Request (application/json)\n\n        {\n          \"temperature\": {\n            \"value\": 25.5\n          },\n          \"seatNumber\": {\n            \"value\": 6\n          }\n        }\n\n+ Response 204\n\n### Replace all entity attributes [PUT /v2/entities/{entityId}/attrs{?type,options}]\n\nThe request payload is an object representing the new entity attributes. The object follows\nthe JSON entity representation format (described in a \"JSON Entity Representation\" above), except\nthat `id` and `type` are not allowed.\n\nThe attributes previously existing in the entity are removed and replaced by the ones in the\nrequest.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters \n    + entityId (required, string) - Id of the entity in question.\n    + type (optional, string) - Entity type, to avoid ambiguity in case there are several\n      entities with the same entity id.\n    + options (optional, string) - Operations options\n        + Members\n            + keyValues - when used, the request payload uses the `keyValues` simplified entity\n              representation. See \"Simplified Entity Representation\" section for details.\n\n+ Request (application/json)\n\n        {\n          \"temperature\": {\n            \"value\": 25.5\n          },\n          \"seatNumber\": {\n            \"value\": 6\n          }\n        }\n\n+ Response 204\n\n### Remove Entity [DELETE /v2/entities/{entityId}{?type}]\n\nDelete the entity.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters \n    + entityId (required, string) - Id of the entity to be deleted\n    + type (optional, string) - Entity type, to avoid ambiguity in case there are several\n      entities with the same entity id.\n\n+ Response 204\n\n\n# Group Attributes\n\n## Attribute by Entity ID [/v2/entities/{entityId}/attrs/{attrName}{?type}]\n\n### Get attribute data [GET /v2/entities/{entityId}/attrs/{attrName}{?type,metadata}]\n\nReturns a JSON object with the attribute data of the attribute. The object follows the JSON\nrepresentation for attributes (described in \"JSON Attribute Representation\" section).\n\nResponse:\n\n* Successful operation uses 200 OK.\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Id of the entity\n    + type (optional, string) - Entity type, to avoid ambiguity in case there are several\n      entities with the same entity id.\n    + attrName: temperature (required, string) - Name of the attribute to be retrieved.\n    + metadata: accuracy (optional, string) - A list of metadata names to include in the response.\n      See \"Filtering out attributes and metadata\" section for more detail.\n\n+ Response 200 (application/json)\n\n        {\n          \"value\": 21.7,\n          \"type\": \"Number\",\n          \"metadata\": {}\n        }\n\n### Update Attribute Data [PUT /v2/entities/{entityId}/attrs/{attrName}{?type}]\n\nThe request payload is an object representing the new attribute data. Previous attribute data\nis replaced by the one in the request. The object follows the JSON representation for attributes\n(described in \"JSON Attribute Representation\" section).\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Id of the entity to update\n    + type (optional, string) - Entity type, to avoid ambiguity in case there are several\n      entities with the same entity id.\n    + attrName: temperature (required, string) - Attribute name\n\n+ Request (application/json)\n\n        {\n          \"value\": 25.0,\n          \"metadata\": {\n            \"unitCode\": {\n              \"value\": \"CEL\"\n            }\n          }\n        }\n\n+ Response 200\n\n\n### Remove a Single Attribute [DELETE /v2/entities/{entityId}/attrs/{attrName}{?type}]\n\nRemoves an entity attribute.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Id of the entity.\n    + type (optional, string) - Entity type, to avoid ambiguity in case there are several\n    entities with the same entity id.\n    + attrName: temperature (required, string) - Attribute name.\n\n+ Response 204\n\n\n# Group Attribute Value\n\n## By Entity ID [/v2/entities/{entityId}/attrs/{attrName}/value?{type}]\n\n### Get Attribute Value [GET /v2/entities/{entityId}/attrs/{attrName}/value{?type}]\n\nThis operation returns the `value` property with the value of the attribute.\n\n* If attribute value is JSON Array or Object:\n  * If `Accept` header can be expanded to `application/json` or `text/plain` return the value as a JSON with a\n    response type of application/json or text/plain (whichever is the first in `Accept` header or\n    `application/json` in case of `Accept: */*`).\n  * Else return a HTTP error \"406 Not Acceptable: accepted MIME types: application/json, text/plain\"\n* If attribute value is a string, number, null or boolean:\n  * If `Accept` header can be expanded to text/plain return the value as text. In case of a string, citation\n    marks are used at the begining and end.\n  * Else return a HTTP error \"406 Not Acceptable: accepted MIME types: text/plain\"\n\nResponse:\n\n* Successful operation uses 200 OK.\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Id of the entity in question\n    + type (optional, string) - Entity type, to avoid ambiguity in case there are several\n      entities with the same entity id.\n    + attrName: address (required, string) - Name of the attribute to be retrieved.\n\n+ Response 200 (application/json)\n\n        {\n          \"address\": \"Ronda de la Comunicacion s/n\",\n          \"zipCode\": 28050,\n          \"city\": \"Madrid\",\n          \"country\": \"Spain\"\n        }\n\n### Update Attribute Value [PUT /v2/entities/{entityId}/attrs/{attrName}/value{?type}]\n\nThe request payload is the new attribute value.\n\n* If the request payload MIME type is `application/json`, then the value of the attribute is set to\n  the JSON object or array coded in the payload (if the payload is not a valid JSON document,\n  then an error is returned).\n* If the request payload MIME type is `text/plain`, then the following algorithm is applied to the\n  payload:\n  * If the payload starts and ends with citation-marks (`\"`), the value is taken as a string\n    (the citation marks themselves are not considered part of the string)\n  * If `true` or `false`, the value is taken as a boolean.\n  * If `null`, the value is taken as null.\n  * If these first three tests \'fail\', the text is interpreted as a number.\n  * If not a valid number, then an error is returned and the attribute\'s value is unchanged.\n\nThe payload MIME type in the request is specified in the `Content-Type` HTTP header.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + entityId: Bcn_Welt (required, string) - Id of the entity to be updated.\n    + type (optional, string) - Entity type, to avoid ambiguity in case there are several\n      entities with the same entity id.\n    + attrName: address (required, string) - Attribute name.\n\n+ Request (application/json)\n\n        {\n          \"address\": \"Ronda de la Comunicacion s/n\",\n          \"zipCode\": 28050,\n          \"city\": \"Madrid\",\n          \"country\": \"Spain\"\n        }\n\n+ Response 200\n\n# Group Types\n\n## Entity types [/v2/types{?limit,offset,options}]\n\n### List Entity Types [GET /v2/types/{?limit,offset,options}]\n\nIf the `values` option is not in use, this operation returns a JSON array with the entity types.\nEach element is a JSON object with information about the type:\n\n* `type` : the entity type name.\n* `attrs` : the set of attribute names along with all the entities of such type, represented in\n  a JSON object whose keys are the attribute names and whose values contain information of such\n  attributes (in particular a list of the types used by attributes with that name along with all the\n  entities).\n* `count` : the number of entities belonging to that type.\n\nIf the `values` option is used, the operation returns a JSON array with a list of entity type\nnames as strings.\n\nResults are ordered by entity `type` in alphabetical order.\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + limit: 10 (optional, number) - Limit the number of types to be retrieved.\n    + offset: 20 (optional, number) - Skip a number of records.\n    + options (optional, string) - Options dictionary.\n      + Members\n          + count - when used, the total number of types is returned in the HTTP header\n            `Fiware-Total-Count`\n          + values - when used, the response payload is a JSON array with a list of entity types\n\n+ Response 200 (application/json)\n\n        [\n          {\n            \"type\": \"Car\",\n            \"attrs\": {\n              \"speed\": {\n                \"types\": [ \"Number\" ]\n              },\n              \"fuel\": {\n                \"types\": [ \"gasoline\", \"diesel\" ]\n              },\n              \"temperature\": {\n                \"types\": [ \"urn:phenomenum:temperature\" ]\n              }\n            },\n            \"count\": 12\n          },\n          {\n            \"type\": \"Room\",\n            \"attrs\": {\n              \"pressure\": {\n                \"types\": [ \"Number\" ]\n              },\n              \"humidity\": {\n                \"types\": [ \"percentage\" ]\n              },\n              \"temperature\": {\n                \"types\": [ \"urn:phenomenum:temperature\" ]\n              }\n            },\n            \"count\": 7\n          }\n        ]\n\n## Entity type [/v2/types/{entityType}]\n\n### Retrieve entity type [GET /v2/types/{entityType}]\n\nThis operation returns a JSON object with information about the type:\n\n* `attrs` : the set of attribute names along with all the entities of such type, represented in\n  a JSON object whose keys are the attribute names and whose values contain information of such\n  attributes (in particular a list of the types used by attributes with that name along with all the\n  entities).\n* `count` : the number of entities belonging to that type.\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + entityType: Room (required, string) - Entity Type\n\n+ Response 200 (application/json)\n\n          {\n            \"attrs\": {\n              \"pressure\": {\n                \"types\": [ \"Number\" ]\n              },\n              \"humidity\": {\n                \"types\": [ \"percentage\" ]\n              },\n              \"temperature\": {\n                \"types\": [ \"urn:phenomenum:temperature\" ]\n              }\n            },\n            \"count\": 7\n          }\n\n# Group Subscriptions\n\nA subscription is represented by a JSON object with the following fields:\n\n+ `id`: Subscription unique identifier. Automatically created at creation time.\n+ `description` (optional): A free text used by the client to describe the subscription.\n+ `subject`: An object that describes the subject of the subscription.\n+ `notification`: An object that describes the notification to send when the subscription is\n  triggered.\n+ `expires`: Subscription expiration date in ISO8601 format. Permanent subscriptions must omit\n  this field.\n+ `status`: Either `active` (for active subscriptions) or `inactive` (for inactive subscriptions).\n  If this field is not provided at subscription creation time, new subscriptions are created with\n  the `active` status, which can be changed by clients afterwards. For expired subscriptions, this\n  attribute is set to `expired` (no matter if the client updates it to `active`/`inactive`).\n  Also, for subscriptions experiencing problems with notifications, the status is set to `failed`.\n  As soon as the notifications start working again, the status is changed back to `active`.\n+ `throttling`: Minimal period of time in seconds which must elapse between two consecutive\n  notifications. It is optional.\n\nA `subject` contains the following subfields:\n\n+ `entities`: A list of objects, each one composed of the following subfields:\n  + `id` or `idPattern`: Id or pattern of the affected entities. Both cannot be used at the same\n     time, but one of them must be present.\n  + `type` or `typePattern`: Type or type pattern of the affected entities. Both cannot be used at\n     the same time. If omitted, it means \"any entity type\".\n+ `condition`: Condition to trigger notifications. This field is optional and it may contain two\n  properties, both optional:\n    + `attrs`: array of attribute names\n    + `expression`: an expression composed of `q`, `mq`, `georel`, `geometry` and `coords` (see \"List\n       entities\" operation above about this field).\n\nA `notification` object contains the following subfields:\n\n+ `attrs` or `exceptAttrs` (both cannot be used at the same time):\n  + `attrs`: List of attributes to be included in notification messages. It also defines the\n    order in which attributes must appear in notifications when `attrsFormat` `value` is used\n    (see \"Notification Messages\" section). An empty list means that all attributes are to be\n    included in notifications. See \"Filtering out attributes and metadata\" section for more detail.\n  + `exceptAttrs`: List of attributes to be excluded from the notification message, i.e.\n     a notification message includes all entity attributes except the ones listed in this field.\n  + If neither `attrs` nor `exceptAttrs` is specified, all attributes are included in\n    notifications.\n+ `http` or `httpCustom` (one of them must be present, but not both at the same time): It is used\n  to convey parameters for notifications delivered through the HTTP protocol.\n+ `attrsFormat` (optional): specifies how the entities are represented in notifications.\n  Accepted values are `normalized` (default), `keyValues` or `values`.\n  If `attrsFormat` takes any value different\n  than those, an error is raised. See detail in \"Notification Messages\" section.\n+ `metadata` (optional): List of metadata to be included in notification messages.\n  See \"Filtering out attributes and metadata\" section for more detail.\n+ `timesSent` (not editable, only present in GET operations): Number of notifications sent due to\n   this subscription.\n+ `lastNotification` (not editable, only present in GET operations): Last notification timestamp in ISO8601 format.\n+ `lastFailure` (not editable, only present in GET operations): Last failure timestamp in ISO8601 format.\n  Not present if subscription has never had a problem with notifications.\n+ `lastSuccess` (not editable, only present in GET operations): Timestamp in ISO8601 format for last successful notification.\n  Not present if subscription has never had a successful notification.\n\nAn `http` object contains the following subfields:\n\n+ `url` : URL referencing the service to be invoked when a notification is generated. An NGSIv2\n  compliant server must support the `http` URL schema. Other schemas could also be supported.\n\nAn `httpCustom` object contains the following subfields.\n\n+ `url`: same as in `http` above.\n+ `headers` (optional): a key-map of HTTP headers that are included in notification messages.\n+ `qs` (optional): a key-map of URL query parameters that are included in notification messages.\n+ `method` (optional): the method to use when sending the notification (default is POST).\n   Only valid HTTP methods are allowed.\n   On specifying an invalid HTTP method, a 400 Bad Request error is returned.\n+ `payload` (optional): the payload to be used in notifications.\n   If omitted, the default payload (see \"Notification Messages\" sections) is used.\n\nIf `httpCustom` is used, then the considerations described in \"Custom Notifications\" section apply.\n\nNotification rules are as follow:\n\n* If `attrs` and `expression` are used, a notification is sent whenever one of the attributes in\n  the `attrs` list changes and at the same time `expression` matches.\n* If `attrs` is used and `expression` is not used, a notification is sent whenever any of the\n  attributes in the `attrs` list changes.\n* If `attrs` is not used and `expression` is used, a notification is sent whenever any of the\n  attributes of the entity changes and at the same time `expression` matches.\n* If neither `attrs` nor `expression` are used, a notification is sent whenever any of the\n  attributes of the entity changes.\n\n## Subscription List [/v2/subscriptions]\n\n### List Subscriptions [GET /v2/subscriptions{?limit,offset,options}]\n\nReturns a list of all the subscriptions present in the system.\n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + limit: 10 (optional, number) - Limit the number of subscriptions to be retrieved\n    + offset: 20 (optional, number) - Skip a number of subscriptions\n    + options (optional, string) - Options dictionary\n      + Members\n          + count - when used, the total number of subscriptions is returned in the HTTP header\n            `Fiware-Total-Count`\n\n+ Response 200\n\n        [\n          {\n            \"id\": \"abcdefg\",\n            \"description\": \"One subscription to rule them all\",\n            \"subject\": {                    \n              \"entities\": [\n                {\n                  \"id\": \"Bcn_Welt\",\n                  \"type\": \"Room\"\n                }\n              ],\n              \"condition\": {\n                 \"attrs\": [ \"temperature \" ],\n                 \"expression\": {\n                    \"q\": \"temperature>40\"\n                 }\n              }\n            },\n            \"notification\": {\n              \"httpCustom\": {\n                \"url\": \"http://localhost:1234\",\n                \"headers\": {\n                  \"X-MyHeader\": \"foo\"\n                },\n                \"qs\": {\n                  \"authToken\": \"bar\"\n                }\n              },\n              \"attrsFormat\": \"keyValues\",\n              \"attrs\": [\"temperature\", \"humidity\"],\n              \"timesSent\": 12,\n              \"lastNotification\": \"2015-10-05T16:00:00.00Z\",\n              \"lastFailure\": \"2015-10-06T16:00:00.00Z\"\n            },\n            \"expires\": \"2016-04-05T14:00:00.00Z\",\n            \"status\": \"failed\",\n            \"throttling\": 5\n          }\n        ]\n\n\n### Create Subscription [POST /v2/subscriptions]\n\nCreates a new subscription.\nThe subscription is represented by a JSON object as described at the beginning of this section.\n\nResponse:\n\n* Successful operation uses 201 Created\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Request (application/json)\n\n        {\n          \"description\": \"One subscription to rule them all\",\n          \"subject\": {\n            \"entities\": [\n              {\n                \"idPattern\": \".*\",\n                \"type\": \"Room\"\n              }\n            ],\n            \"condition\": {\n              \"attrs\": [ \"temperature\" ],\n              \"expression\": {\n                \"q\": \"temperature>40\"\n              }\n            }\n          },\n          \"notification\": {\n            \"http\": {\n              \"url\": \"http://localhost:1234\"\n            },\n            \"attrs\": [\"temperature\", \"humidity\"]\n          },            \n          \"expires\": \"2016-04-05T14:00:00.00Z\",\n          \"throttling\": 5\n        }\n\n+ Response 201\n\n    + Headers\n\n            Location: /v2/subscriptions/abcde98765\n\n\n## Subscription By ID [/v2/subscriptions/{subscriptionId}]\n\n### Retrieve Subscription [GET /v2/subscriptions/{subscriptionId}]\n\nThe response is the subscription represented by a JSON object as described at the beginning of this\nsection.\n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + subscriptionId: abcdef (required, string) - subscription Id.\n\n+ Response 200 (application/json)\n\n        {\n          \"id\": \"abcdef\",\n          \"description\": \"One subscription to rule them all\",\n          \"subject\": {\n            \"entities\": [\n              {\n                \"idPattern\": \".*\",\n                \"type\": \"Room\"\n              }\n            ],\n            \"condition\": {\n              \"attrs\": [ \"temperature \" ],\n              \"expression\": {\n                \"q\": \"temperature>40\"\n              }\n            }\n          },\n          \"notification\": {\n            \"http\": {\n              \"url\": \"http://localhost:1234\"\n            },\n            \"attrs\": [\"temperature\", \"humidity\"],\n            \"timesSent\": 12,\n            \"lastNotification\": \"2015-10-05T16:00:00.00Z\"\n            \"lastSuccess\": \"2015-10-05T16:00:00.00Z\"\n          },\n          \"expires\": \"2016-04-05T14:00:00.00Z\",\n          \"status\": \"active\",\n          \"throttling\": 5\n        }\n\n\n### Update Subscription [PATCH /v2/subscriptions/{subscriptionId}]\n\nOnly the fields included in the request are updated in the subscription.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + subscriptionId: abcdef (required, string) - subscription Id.\n\n+ Request (application/json)\n\n        {\n          \"expires\": \"2016-04-05T14:00:00.00Z\"\n        }\n\n+ Response 204\n\n### Delete subscription [DELETE /v2/subscriptions/{subscriptionId}]\n\nCancels subscription.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + subscriptionId: abcdef (required, string) - subscription Id.\n\n+ Response 204\n\n# Group Registrations\n\nA Context Registration allows to bind external context information sources so that they can\nplay the role of providers\nof certain subsets (entities, attributes) of the context information space, including those located\nat specific geographical areas.\n\nA NGSIv2 server implementation may implement query and/or update forwarding to context information sources. In\nparticular, some of the following forwarding mechanisms could be implemented (not exahustive list):\n\n* Legacy forwarding (based on NGSIv1 operations)\n* NGSI Context Source Forwarding Specification\n\nPlease check the corresponding specification in order to get the details.\n\nA context registration is represented by a JSON object with the following fields:\n\n+ `id` : Unique identifier assigned to the registration. Automatically generated at creation time.\n+ `description` : Description given to this registration. Optional. \n+ `provider` : Object that describes the context source registered. Mandatory. \n+ `dataProvided` : Object that describes the data provided by this source. Mandatory. \n+ `status`: Enumerated field which captures the current status of this registration:\nEither `active` (for active registrations) or `inactive` (for inactive registrations).\n  If this field is not provided at registration creation time, new registrations are created with\n  the `active` status, which may be changed by clients afterwards. For expired registrations, this\n  attribute is set to `expired` (no matter if the client updates it to `active`/`inactive`).\n  Also, for registrations experiencing problems with forwarding operations, the status is set to `failed`.\n  As soon as the forwarding operations start working again, the status is changed back to `active`.\n+ `expires` : Registration expiration date in ISO8601 format. Permanent registrations must omit this field.\n+ `forwardingInformation`: Information related to the forwarding operations made against the provider.\nAutomatically provided by the implementation, in the case such implementation supports forwarding capabilities.\n\nThe `provider` field contains the following subfields:\n+ `http` : It is used to convey parameters for providers that deliver information through the HTTP protocol.\n(Only protocol supported nowadays).\nIt must contain a subfield named `url` with the URL that serves as the endpoint that offers the providing interface.\nThe endpoint must *not* include the protocol\nspecific part (for instance `/v2/entities`). \n+ `supportedForwardingMode` : It is used to convey the forwarding mode supported by this context provider. By default `all`. \nAllowed values are:\n    + `none` : This provider does not support request forwarding.\n    + `query` : This provider only supports request forwarding to query data.\n    + `update` : This provider only supports request forwarding to update data.\n    + `all` : This provider supports both query and update forwarding requests. (Default value)\n\nThe `dataProvided` field contains the following subfields:\n\n+ `entities`: A list of objects, each one composed of the following subfields:\n    + `id` or `idPattern`: Id or pattern of the affected entities. Both cannot be used at the same\n      time, but one of them must be present.\n    + `type` or `typePattern`: Type or pattern of the affected entities. Both cannot be used at\n      the same time. If omitted, it means \"any entity type\".\n+ `attrs`: List of attributes to be provided (if not specified, all attributes).\n+ `expression`: By means of a filtering expression, allows to express what is the scope of the data provided.\nCurrently only geographical scopes are supported through the following subterms:\n    + `georel` : Any of the geographical relationships as specified by the Geoqueries section of this specification. \n    + `geometry` : Any of the supported geometries as specified by the Geoqueries section of this specification. \n    + `coords` : String representation of coordinates as specified by the Geoqueries section of this specification. \n\nThe `forwardingInformation` field contains the following subfields:\n\n+ `timesSent` (not editable, only present in GET operations): Number of request forwardings sent due to this registration.\n+ `lastForwarding` (not editable, only present in GET operations): Last forwarding timestamp in ISO8601 format.\n+ `lastFailure` (not editable, only present in GET operations): Last failure timestamp in ISO8601 format.\nNot present if registration has never had a problem with forwarding.\n+ `lastSuccess` (not editable, only present in GET operations): Timestamp in ISO8601 format for last successful request forwarding.\nNot present if registration has never had a successful notification.\n\n## Registration list [/v2/registrations]\n\n### List Registrations [GET /v2/registrations{?limit,offset,options}]\n\nLists all the context provider registrations present in the system.\n\n+ Parameters\n    + limit: 10 (optional, number) - Limit the number of registrations to be retrieved\n    + offset: 20 (optional, number) - Skip a number of registrations\n    + options (optional, string) - Options dictionary\n      + Members\n          + count - when used, the total number of registrations is returned in the HTTP header\n            `Fiware-Total-Count`\n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Response 200\n\n        [\n          {\n            \"id\": \"abcdefg\",\n            \"description\": \"Example Context Source\",\n            \"dataProvided\": {\n              \"entities\": [\n                {\n                  \"id\": \"Bcn_Welt\",\n                  \"type\": \"Room\"\n                }\n              ],\n              \"attrs\": [\n                \"temperature\"\n              ]\n            },\n            \"provider\": {\n              \"http\": {\n                \"url\": \"http://contextsource.example.org\"\n              },\n              \"supportedForwardingMode\": \"all\"\n            },\n            \"expires\": \"2017-10-31T12:00:00\",\n            \"status\": \"active\",\n            \"forwardingInformation\": {\n              \"timesSent\": 12,\n              \"lastForwarding\": \"2017-10-06T16:00:00.00Z\",\n              \"lastSuccess\": \"2017-10-06T16:00:00.00Z\",\n              \"lastFailure\": \"2017-10-05T16:00:00.00Z\"\n            }\n          }\n        ]\n\n### Create Registration [POST /v2/registrations]\n\nCreates a new context provider registration. This is typically used for binding context sources\nas providers of certain data.\nThe registration is represented by a JSON object as described at the beginning of this section.\n\nResponse:\n\n* Successful operation uses 201 Created\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Request (application/json)\n\n        {\n          \"description\": \"Relative Humidity Context Source\",\n          \"dataProvided\": {\n            \"entities\": [\n              {\n                \"id\": \"room2\",\n                \"type\": \"Room\"\n              }\n            ],\n            \"attrs\": [\n              \"relativeHumidity\"\n            ]\n          },\n          \"provider\": {\n            \"http\":{ \n              \"url\": \"http://localhost:1234\"\n            }\n          }\n        }\n\n+ Response 201\n\n    + Headers\n\n            Location: /v2/registrations/abcde98765\n\n## Registration By ID [/v2/registrations/{registrationId}]\n\n### Retrieve Registration [GET /v2/registrations/{registrationId}]\n\nThe response is the registration represented by a JSON object as described at the beginning of this\nsection.\n\nResponse:\n\n* Successful operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + registrationId: abcdef (required, string) - registration Id.\n\n+ Response 200 (application/json)\n\n      {\n            \"id\": \"abcdefg\",\n            \"description\": \"Example Context Source\",\n            \"dataProvided\": {\n              \"entities\": [\n                {\n                  \"id\": \"Bcn_Welt\",\n                  \"type\": \"Room\"\n                }\n              ],\n              \"attrs\": [\n                \"temperature\"\n              ]\n            },\n            \"provider\": {\n              \"http\": {\n                \"url\": \"http://contextsource.example.org\"\n              },\n              \"supportedForwardingMode\": \"all\"\n            },\n            \"expires\": \"2017-10-31T12:00:00\",\n            \"status\": \"failed\",\n            \"forwardingInformation\": {\n              \"timesSent\": 12,\n              \"lastForwarding\": \"2017-10-06T16:00:00.00Z\",\n              \"lastFailure\": \"2017-10-06T16:00:00.00Z\",\n              \"lastSuccess\": \"2017-10-05T18:25:00.00Z\",\n            }\n      }      \n\n### Update Registration [PATCH /v2/registrations/{registrationId}]\n\nOnly the fields included in the request are updated in the registration.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + registrationId: abcdef (required, string) - registration Id.\n\n+ Request (application/json)\n\n        {\n            \"expires\": \"2017-10-04T00:00:00\"\n        }\n\n+ Response 204\n\n### Delete Registration [DELETE /v2/registrations/{registrationId}]\n\nCancels a context provider registration.\n\nResponse:\n\n* Successful operation uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + registrationId: abcdef (required, string) - registration Id.\n\n+ Response 204\n\n# Group Batch Operations\n\n### Update [POST /v2/op/update]\n\nThis operation allows to create, update and/or delete several entities in a single batch operation.\nThe payload is an object with two properties:\n\n+ `actionType`, to specify the kind of update action to do: either `append`, `appendStrict`, `update`,\n  `delete`, or `replace`.\n+ `entities`, an array of entities, each entity specified using the JSON entity representation format\n  (described in the section \"JSON Entity Representation\").\n\nThis operation is split in as many individual operations as entities in the `entities` vector, so\nthe `actionType` is executed for each one of them. Depending on the `actionType`, a mapping with\nregular non-batch operations can be done:\n\n* `append`: maps to `POST /v2/entities` (if the entity does not already exist) or `POST /v2/entities/<id>/attrs`\n  (if the entity already exists).\n* `appendStrict`: maps to `POST /v2/entities` (if the entity does not already exist) or\n  `POST /v2/entities/<id>/attrs?options=append` (if the entity already exists).\n* `update`: maps to `PATCH /v2/entities/<id>/attrs`.\n* `delete`: maps to `DELETE /v2/entities/<id>/attrs/<attrName>` on every attribute included in the entity or\n  to `DELETE /v2/entities/<id>` if no attribute were included in the entity.\n* `replace`: maps to `PUT /v2/entities/<id>/attrs`.\n\nResponse:\n\n* Successful operation uses 204 No Content.\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Request (application/json)\n\n        {\n          \"actionType\": \"append\",\n          \"entities\": [\n            {\n              \"type\": \"Room\",\n              \"id\": \"Bcn-Welt\",\n              \"temperature\": {\n                \"value\": 21.7\n               },\n              \"humidity\": {\n                \"value\": 60\n              }\n            },\n            {\n              \"type\": \"Room\",\n              \"id\": \"Mad_Aud\",\n              \"temperature\": {\n                \"value\": 22.9\n              },\n              \"humidity\": {\n                \"value\": 85\n              }\n            }\n          ]\n        }\n\n+ Parameters\n    + options (optional, string) - Options dictionary\n      + Members\n          + keyValues - when used, the request payload uses the `keyValues`\n            simplified entity representation. See the \"Simplified Entity Representation\"\n            section for details.\n\n+ Response 204\n\n\n### Query [POST /v2/op/query{?limit,offset,options}]\n\nThe response payload is an Array containing one object per matching entity, or an empty array `[]` if \nno entities are found. The entities follow the JSON entity representation format\n(described in the section \"JSON Entity Representation\").\n\nThe payload may contain the following elements (all of them optional):\n\n+ `entities`: a list of entites to search for. Each element is represented by a JSON object with the\n  following elements:\n    + `id` or `idPattern`: Id or pattern of the affected entities. Both cannot be used at the same\n      time, but one of them must be present.\n    + `type` or `typePattern`: Type or type pattern of the entities to search for. Both cannot be used at\n      the same time. If omitted, it means \"any entity type\".\n+ `attrs`: List of attributes to be provided (if not specified, all attributes).\n+ `expression`: an expression composed of `q`, `mq`, `georel`, `geometry` and `coords` (see \"List\n   entities\" operation above about this field).\n+ `metadata`: a list of metadata names to include in the response.\n   See \"Filtering out attributes and metadata\" section for more detail.\n\nResponse code:\n\n* Successful operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + limit: 10 (optional, number) - Limit the number of entities to be retrieved.\n    + offset: 20 (optional, number) - Skip a number of records.\n    + orderBy: temperature,!speed (optional, string) - Criteria for ordering results.\n      See \"Ordering Results\" section for details.\n    + options (optional, string) - Options dictionary\n      + Members\n          + count - the total number of entities is returned in the response as an\n          HTTP header named `Fiware-Total-Count`.\n          + keyValues - when used, the response payload uses the `keyValues` simplified entity\n            representation. See \"Simplified Entity Representation\" section for details.\n          + values - when used, the response payload uses the `values` simplified entity\n            representation. See \"Simplified Entity Representation\" section for details.\n          + unique - when used, the response payload uses the `values` simplified entity\n            representation. recurring values are left out.\n            See \"Simplified Entity Representation\" section for details.\n\n+ Request (application/json)\n\n        {\n          \"entities\": [\n            {\n              \"idPattern\": \".*\",\n              \"type\": \"Room\"\n            },\n            {\n              \"id\": \"Car\",\n              \"type\": \"P-9873-K\"\n            }\n          ],\n          \"attrs\": [\n            \"temperature\",\n            \"humidity\"\n          ],\n          \"expression\": {\n             \"q\": \"temperature>20\"\n          },\n          \"metadata\": [\n            \"accuracy\",\n            \"timestamp\"\n          ]\n        }\n\n+ Response 200 (application/json)\n\n        [\n          {\n            \"type\": \"Room\",\n            \"id\": \"DC_S1-D41\",\n            \"temperature\": {\n              \"value\": 35.6,\n              \"type\": \"Number\"\n            }\n          },\n          {\n            \"type\": \"Room\",\n            \"id\": \"Boe-Idearium\",\n            \"temperature\": {\n              \"value\": 22.5,\n              \"type\": \"Number\"\n            }\n          },\n          {\n            \"type\": \"Car\",\n            \"id\": \"P-9873-K\",\n            \"temperature\": {\n              \"value\": 40,\n              \"type\": \"Number\",\n              \"accuracy\": 2,\n              \"timestamp\": {\n                \"value\": \"2015-06-04T07:20:27.378Z\",\n                \"type\": \"DateTime\"\n              }\n            }\n          }\n        ]\n\n\n### Notify [POST /v2/op/notify{?options}]\n\nThis operation is intended to consume a notification payload so that all the entity data included by such notification is persisted, overwriting if necessary.\nThis operation is useful when one NGSIv2 endpoint is subscribed to another NGSIv2 endpoint (federation scenarios). \nThe request payload must be an NGSIv2 notification payload. \nThe behaviour must be exactly the same as `POST /v2/op/update` with `actionType` equal to `append`. \n\nResponse code:\n\n* Successful operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for\n  more details.\n\n+ Parameters\n    + options (optional, string) - Options dictionary\n      + Members\n          + keyValues - when used, the request payload uses the `keyValues` simplified entity\n            representation. See \"Simplified Entity Representation\" section for details.\n\n+ Request (application/json)\n\n        {\n          \"subscriptionId\": \"5aeb0ee97d4ef10a12a0262f\",\n          \"data\": [{\n            \"type\": \"Room\",\n            \"id\": \"DC_S1-D41\",\n            \"temperature\": {\n              \"value\": 35.6,\n              \"type\": \"Number\"\n            }\n          },\n          {\n            \"type\": \"Room\",\n            \"id\": \"Boe-Idearium\",\n            \"temperature\": {\n              \"value\": 22.5,\n              \"type\": \"Number\"\n            }\n          }]\n        }\n\n+ Response 200 (application/json)\n\n"
    });

    if (false) {
        var changed = null
        var xhrChanged = new XMLHttpRequest();
        var xhrData = new XMLHttpRequest();
        setInterval(function() {
            xhrChanged.open('GET', window.location.href + "/changed", true);
            xhrChanged.send();

            xhrChanged.onreadystatechange = function() {
                if (xhrChanged.readyState == 4 && xhrChanged.status == 200) {
                    if (!changed) {
                        changed = xhrChanged.responseText
                    }
                    if (changed != xhrChanged.responseText) {
                        changed = xhrChanged.responseText
                        xhrData.open('GET', window.location.href + "/source", true);
                        xhrData.send();

                        xhrData.onreadystatechange = function() {
                            if (xhrData.readyState == 4 && xhrData.status == 200) {
                                embed.iframeElement.contentWindow.postMessage({"origin": embed.ORIGIN, "eventType": "anonymousPreview", "data": {"code": xhrData.responseText}}, '*');
                            }
                        }
                    }
                }
            }
        }, 1000);
    }
  </script>
</body>
</html>
